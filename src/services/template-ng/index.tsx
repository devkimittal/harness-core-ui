/*
 * Copyright 2022 Harness Inc. All rights reserved.
 * Use of this source code is governed by the PolyForm Shield 1.0.0 license
 * that can be found in the licenses directory at the root of this repository, also available at
 * https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt.
 */

/* Generated by restful-react */

import React from 'react'
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react'

import { getConfig, getUsingFetch, mutateUsingFetch, GetUsingFetchProps, MutateUsingFetchProps } from '../config'
export const SPEC_VERSION = '2.0'
export type AuditFilterProperties = FilterProperties & {
  actions?: (
    | 'CREATE'
    | 'UPDATE'
    | 'RESTORE'
    | 'DELETE'
    | 'UPSERT'
    | 'INVITE'
    | 'RESEND_INVITE'
    | 'REVOKE_INVITE'
    | 'ADD_COLLABORATOR'
    | 'REMOVE_COLLABORATOR'
    | 'CREATE_TOKEN'
    | 'REVOKE_TOKEN'
    | 'LOGIN'
    | 'LOGIN2FA'
    | 'UNSUCCESSFUL_LOGIN'
    | 'ADD_MEMBERSHIP'
    | 'REMOVE_MEMBERSHIP'
  )[]
  endTime?: number
  environments?: Environment[]
  modules?: ('CD' | 'CI' | 'CV' | 'CF' | 'CE' | 'CORE' | 'PMS' | 'TEMPLATESERVICE')[]
  principals?: Principal[]
  resources?: ResourceDTO[]
  scopes?: ResourceScopeDTO[]
  startTime?: number
}

export interface ByteString {
  empty?: boolean
  validUtf8?: boolean
}

export interface CcmConnectorFilter {
  awsAccountId?: string
  azureSubscriptionId?: string
  azureTenantId?: string
  featuresEnabled?: ('BILLING' | 'OPTIMIZATION' | 'VISIBILITY')[]
  gcpProjectId?: string
  k8sConnectorRef?: string
}

export type ConnectorFilterProperties = FilterProperties & {
  categories?: (
    | 'CLOUD_PROVIDER'
    | 'SECRET_MANAGER'
    | 'CLOUD_COST'
    | 'ARTIFACTORY'
    | 'CODE_REPO'
    | 'MONITORING'
    | 'TICKETING'
  )[]
  ccmConnectorFilter?: CcmConnectorFilter
  connectivityStatuses?: ('SUCCESS' | 'FAILURE' | 'PARTIAL' | 'UNKNOWN')[]
  connectorIdentifiers?: string[]
  connectorNames?: string[]
  description?: string
  inheritingCredentialsFromDelegate?: boolean
  types?: (
    | 'K8sCluster'
    | 'Git'
    | 'Splunk'
    | 'AppDynamics'
    | 'Prometheus'
    | 'Dynatrace'
    | 'Vault'
    | 'AzureKeyVault'
    | 'DockerRegistry'
    | 'Local'
    | 'AwsKms'
    | 'GcpKms'
    | 'AwsSecretManager'
    | 'Gcp'
    | 'Aws'
    | 'Artifactory'
    | 'Jira'
    | 'Nexus'
    | 'Github'
    | 'Gitlab'
    | 'Bitbucket'
    | 'Codecommit'
    | 'CEAws'
    | 'CEAzure'
    | 'GcpCloudCost'
    | 'CEK8sCluster'
    | 'HttpHelmRepo'
    | 'NewRelic'
    | 'Datadog'
    | 'SumoLogic'
    | 'PagerDuty'
    | 'CustomHealth'
    | 'ServiceNow'
    | 'ErrorTracking'
  )[]
}

export interface Descriptor {
  containingType?: Descriptor
  enumTypes?: EnumDescriptor[]
  extendable?: boolean
  extensions?: FieldDescriptor[]
  fields?: FieldDescriptor[]
  file?: FileDescriptor
  fullName?: string
  index?: number
  name?: string
  nestedTypes?: Descriptor[]
  oneofs?: OneofDescriptor[]
  options?: MessageOptions
}

export interface EntityDetailProtoDTO {
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  defaultInstanceForType?: EntityDetailProtoDTO
  descriptorForType?: Descriptor
  entityRefCase?: 'IDENTIFIERREF' | 'INPUTSETREF' | 'TEMPLATEREF' | 'ENTITYREF_NOT_SET'
  identifierRef?: IdentifierRefProtoDTO
  identifierRefOrBuilder?: IdentifierRefProtoDTOOrBuilder
  initializationErrorString?: string
  initialized?: boolean
  inputSetRef?: InputSetReferenceProtoDTO
  inputSetRefOrBuilder?: InputSetReferenceProtoDTOOrBuilder
  name?: string
  nameBytes?: ByteString
  parserForType?: ParserEntityDetailProtoDTO
  serializedSize?: number
  templateRef?: TemplateReferenceProtoDTO
  templateRefOrBuilder?: TemplateReferenceProtoDTOOrBuilder
  type?:
    | 'PROJECTS'
    | 'PIPELINES'
    | 'CONNECTORS'
    | 'SECRETS'
    | 'SERVICE'
    | 'ENVIRONMENT'
    | 'INPUT_SETS'
    | 'CV_CONFIG'
    | 'DELEGATES'
    | 'DELEGATE_CONFIGURATIONS'
    | 'CV_VERIFICATION_JOB'
    | 'CV_KUBERNETES_ACTIVITY_SOURCE'
    | 'INTEGRATION_STEPS'
    | 'INTEGRATION_STAGE'
    | 'DEPLOYMENT_STAGE'
    | 'DEPLOYMENT_STEPS'
    | 'PIPELINE_STEPS'
    | 'APPROVAL_STAGE'
    | 'TRIGGERS'
    | 'FEATURE_FLAG_STAGE'
    | 'MONITORED_SERVICE'
    | 'TEMPLATE'
    | 'GIT_REPOSITORIES'
    | 'FEATURE_FLAGS'
    | 'HTTP_STEP'
    | 'SHELL_SCRIPT_STEP'
    | 'K8S_CANARY_DEPLOY_STEP'
    | 'JIRA_CREATE_STEP'
    | 'SERVICENOW_APPROVAL_STEP'
    | 'JIRA_UPDATE_STEP'
    | 'JIRA_APPROVAL_STEP'
    | 'HARNESS_APPROVAL_STEP'
    | 'BARRIER_STEP'
    | 'VERIFY_STEP'
    | 'OPAPOLICIES'
    | 'POLICY_STEP'
    | 'ARTIFACTORY_UPLOAD'
    | 'GCS_UPLOAD'
    | 'S3_UPLOAD'
    | 'BUILD_AND_PUSH_GCR'
    | 'BUILD_AND_PUSH_ECR'
    | 'BUILD_AND_PUSH_DOCKER_REGISTRY'
    | 'RUN_STEP'
    | 'RUN_TEST'
    | 'PLUGIN'
    | 'RESTORE_CACHE_GCS'
    | 'RESTORE_CACHE_S3'
    | 'SAVE_CACHE_GCS'
    | 'SAVE_CACHE_S3'
    | 'FLAG_CONFIGURATION'
    | 'SECURITY'
    | 'K8S_APPLY_STEP'
    | 'K8S_BLUE_GREEN_DEPLOY_STEP'
    | 'K8S_ROLLING_DEPLOY_STEP'
    | 'K8S_ROLLING_ROLLBACK_STEP'
    | 'K8S_SCALE_STEP'
    | 'K8S_DELETE_STEP'
    | 'K8S_BG_SWAP_SERVICES_STEP'
    | 'K8S_CANARY_DELETE_STEP'
    | 'TERRAFORM_APPLY_STEP'
    | 'TERRAFORM_PLAN_STEP'
    | 'TERRAFORM_DESTROY_STEP'
    | 'TERRAFORM_ROLLBACK_STEP'
    | 'HELM_DEPLOY_STEP'
    | 'HELM_ROLLBACK_STEP'
    | 'UNRECOGNIZED'
  typeValue?: number
  unknownFields?: UnknownFieldSet
}

export interface EntityGitDetails {
  branch?: string
  filePath?: string
  objectId?: string
  repoIdentifier?: string
  repoName?: string
  rootFolder?: string
}

export interface EntityValidityDetails {
  invalidYaml?: string
  valid?: boolean
}

export interface EnumDescriptor {
  containingType?: Descriptor
  file?: FileDescriptor
  fullName?: string
  index?: number
  name?: string
  options?: EnumOptions
  values?: EnumValueDescriptor[]
}

export interface EnumOptions {
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  allFieldsRaw?: {
    [key: string]: { [key: string]: any }
  }
  allowAlias?: boolean
  defaultInstanceForType?: EnumOptions
  deprecated?: boolean
  descriptorForType?: Descriptor
  initializationErrorString?: string
  initialized?: boolean
  parserForType?: ParserEnumOptions
  serializedSize?: number
  uninterpretedOptionCount?: number
  uninterpretedOptionList?: UninterpretedOption[]
  uninterpretedOptionOrBuilderList?: UninterpretedOptionOrBuilder[]
  unknownFields?: UnknownFieldSet
}

export interface EnumValueDescriptor {
  file?: FileDescriptor
  fullName?: string
  index?: number
  name?: string
  number?: number
  options?: EnumValueOptions
  type?: EnumDescriptor
}

export interface EnumValueOptions {
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  allFieldsRaw?: {
    [key: string]: { [key: string]: any }
  }
  defaultInstanceForType?: EnumValueOptions
  deprecated?: boolean
  descriptorForType?: Descriptor
  initializationErrorString?: string
  initialized?: boolean
  parserForType?: ParserEnumValueOptions
  serializedSize?: number
  uninterpretedOptionCount?: number
  uninterpretedOptionList?: UninterpretedOption[]
  uninterpretedOptionOrBuilderList?: UninterpretedOptionOrBuilder[]
  unknownFields?: UnknownFieldSet
}

export interface Environment {
  identifier: string
  type: 'PreProduction' | 'Production'
}

export interface Error {
  code?:
    | 'DEFAULT_ERROR_CODE'
    | 'INVALID_ARGUMENT'
    | 'INVALID_EMAIL'
    | 'DOMAIN_NOT_ALLOWED_TO_REGISTER'
    | 'COMMNITY_EDITION_NOT_FOUND'
    | 'DEPLOY_MODE_IS_NOT_ON_PREM'
    | 'USER_ALREADY_REGISTERED'
    | 'USER_INVITATION_DOES_NOT_EXIST'
    | 'USER_DOES_NOT_EXIST'
    | 'USER_INVITE_OPERATION_FAILED'
    | 'USER_DISABLED'
    | 'ACCOUNT_DOES_NOT_EXIST'
    | 'INACTIVE_ACCOUNT'
    | 'ACCOUNT_MIGRATED'
    | 'USER_DOMAIN_NOT_ALLOWED'
    | 'MAX_FAILED_ATTEMPT_COUNT_EXCEEDED'
    | 'RESOURCE_NOT_FOUND'
    | 'INVALID_FORMAT'
    | 'ROLE_DOES_NOT_EXIST'
    | 'EMAIL_NOT_VERIFIED'
    | 'EMAIL_VERIFICATION_TOKEN_NOT_FOUND'
    | 'INVALID_TOKEN'
    | 'REVOKED_TOKEN'
    | 'INVALID_CAPTCHA_TOKEN'
    | 'NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS'
    | 'EXPIRED_TOKEN'
    | 'TOKEN_ALREADY_REFRESHED_ONCE'
    | 'ACCESS_DENIED'
    | 'NG_ACCESS_DENIED'
    | 'INVALID_CREDENTIAL'
    | 'INVALID_CREDENTIALS_THIRD_PARTY'
    | 'INVALID_KEY'
    | 'INVALID_CONNECTOR_TYPE'
    | 'INVALID_KEYPATH'
    | 'INVALID_VARIABLE'
    | 'UNKNOWN_HOST'
    | 'UNREACHABLE_HOST'
    | 'INVALID_PORT'
    | 'SSH_SESSION_TIMEOUT'
    | 'SOCKET_CONNECTION_ERROR'
    | 'CONNECTION_ERROR'
    | 'SOCKET_CONNECTION_TIMEOUT'
    | 'CONNECTION_TIMEOUT'
    | 'SSH_CONNECTION_ERROR'
    | 'USER_GROUP_ERROR'
    | 'INVALID_EXECUTION_ID'
    | 'ERROR_IN_GETTING_CHANNEL_STREAMS'
    | 'UNEXPECTED'
    | 'UNKNOWN_ERROR'
    | 'UNKNOWN_EXECUTOR_TYPE_ERROR'
    | 'DUPLICATE_STATE_NAMES'
    | 'TRANSITION_NOT_LINKED'
    | 'TRANSITION_TO_INCORRECT_STATE'
    | 'TRANSITION_TYPE_NULL'
    | 'STATES_WITH_DUP_TRANSITIONS'
    | 'BARRIERS_NOT_RUNNING_CONCURRENTLY'
    | 'NON_FORK_STATES'
    | 'NON_REPEAT_STATES'
    | 'INITIAL_STATE_NOT_DEFINED'
    | 'FILE_INTEGRITY_CHECK_FAILED'
    | 'INVALID_URL'
    | 'FILE_DOWNLOAD_FAILED'
    | 'PLATFORM_SOFTWARE_DELETE_ERROR'
    | 'INVALID_CSV_FILE'
    | 'INVALID_REQUEST'
    | 'SCHEMA_VALIDATION_FAILED'
    | 'FILTER_CREATION_ERROR'
    | 'INVALID_YAML_ERROR'
    | 'PLAN_CREATION_ERROR'
    | 'INVALID_INFRA_STATE'
    | 'PIPELINE_ALREADY_TRIGGERED'
    | 'NON_EXISTING_PIPELINE'
    | 'DUPLICATE_COMMAND_NAMES'
    | 'INVALID_PIPELINE'
    | 'COMMAND_DOES_NOT_EXIST'
    | 'DUPLICATE_ARTIFACTSTREAM_NAMES'
    | 'DUPLICATE_HOST_NAMES'
    | 'STATE_NOT_FOR_TYPE'
    | 'STATE_MACHINE_ISSUE'
    | 'STATE_DISCONTINUE_FAILED'
    | 'STATE_PAUSE_FAILED'
    | 'PAUSE_ALL_ALREADY'
    | 'RESUME_ALL_ALREADY'
    | 'ROLLBACK_ALREADY'
    | 'ABORT_ALL_ALREADY'
    | 'EXPIRE_ALL_ALREADY'
    | 'RETRY_FAILED'
    | 'UNKNOWN_ARTIFACT_TYPE'
    | 'UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE'
    | 'INIT_TIMEOUT'
    | 'LICENSE_EXPIRED'
    | 'NOT_LICENSED'
    | 'REQUEST_TIMEOUT'
    | 'WORKFLOW_ALREADY_TRIGGERED'
    | 'JENKINS_ERROR'
    | 'INVALID_ARTIFACT_SOURCE'
    | 'INVALID_ARTIFACT_SERVER'
    | 'INVALID_CLOUD_PROVIDER'
    | 'UPDATE_NOT_ALLOWED'
    | 'DELETE_NOT_ALLOWED'
    | 'APPDYNAMICS_CONFIGURATION_ERROR'
    | 'APM_CONFIGURATION_ERROR'
    | 'SPLUNK_CONFIGURATION_ERROR'
    | 'ELK_CONFIGURATION_ERROR'
    | 'LOGZ_CONFIGURATION_ERROR'
    | 'SUMO_CONFIGURATION_ERROR'
    | 'INSTANA_CONFIGURATION_ERROR'
    | 'APPDYNAMICS_ERROR'
    | 'STACKDRIVER_ERROR'
    | 'STACKDRIVER_CONFIGURATION_ERROR'
    | 'NEWRELIC_CONFIGURATION_ERROR'
    | 'NEWRELIC_ERROR'
    | 'DYNA_TRACE_CONFIGURATION_ERROR'
    | 'DYNA_TRACE_ERROR'
    | 'CLOUDWATCH_ERROR'
    | 'CLOUDWATCH_CONFIGURATION_ERROR'
    | 'PROMETHEUS_CONFIGURATION_ERROR'
    | 'DATA_DOG_CONFIGURATION_ERROR'
    | 'SERVICE_GUARD_CONFIGURATION_ERROR'
    | 'ENCRYPTION_NOT_CONFIGURED'
    | 'UNAVAILABLE_DELEGATES'
    | 'WORKFLOW_EXECUTION_IN_PROGRESS'
    | 'PIPELINE_EXECUTION_IN_PROGRESS'
    | 'AWS_ACCESS_DENIED'
    | 'AWS_CLUSTER_NOT_FOUND'
    | 'AWS_SERVICE_NOT_FOUND'
    | 'IMAGE_NOT_FOUND'
    | 'ILLEGAL_ARGUMENT'
    | 'IMAGE_TAG_NOT_FOUND'
    | 'DELEGATE_NOT_AVAILABLE'
    | 'INVALID_YAML_PAYLOAD'
    | 'AUTHENTICATION_ERROR'
    | 'AUTHORIZATION_ERROR'
    | 'UNRECOGNIZED_YAML_FIELDS'
    | 'COULD_NOT_MAP_BEFORE_YAML'
    | 'MISSING_BEFORE_YAML'
    | 'MISSING_YAML'
    | 'NON_EMPTY_DELETIONS'
    | 'GENERAL_YAML_ERROR'
    | 'GENERAL_YAML_INFO'
    | 'YAML_GIT_SYNC_ERROR'
    | 'GIT_CONNECTION_ERROR'
    | 'GIT_ERROR'
    | 'ARTIFACT_SERVER_ERROR'
    | 'ENCRYPT_DECRYPT_ERROR'
    | 'SECRET_MANAGEMENT_ERROR'
    | 'SECRET_NOT_FOUND'
    | 'KMS_OPERATION_ERROR'
    | 'GCP_KMS_OPERATION_ERROR'
    | 'VAULT_OPERATION_ERROR'
    | 'AWS_SECRETS_MANAGER_OPERATION_ERROR'
    | 'AZURE_KEY_VAULT_OPERATION_ERROR'
    | 'CYBERARK_OPERATION_ERROR'
    | 'UNSUPPORTED_OPERATION_EXCEPTION'
    | 'FEATURE_UNAVAILABLE'
    | 'GENERAL_ERROR'
    | 'BASELINE_CONFIGURATION_ERROR'
    | 'SAML_IDP_CONFIGURATION_NOT_AVAILABLE'
    | 'INVALID_AUTHENTICATION_MECHANISM'
    | 'INVALID_SAML_CONFIGURATION'
    | 'INVALID_OAUTH_CONFIGURATION'
    | 'INVALID_LDAP_CONFIGURATION'
    | 'USER_GROUP_SYNC_FAILURE'
    | 'USER_GROUP_ALREADY_EXIST'
    | 'INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION'
    | 'EXPLANATION'
    | 'HINT'
    | 'NOT_WHITELISTED_IP'
    | 'INVALID_TOTP_TOKEN'
    | 'EMAIL_FAILED'
    | 'SSL_HANDSHAKE_FAILED'
    | 'NO_APPS_ASSIGNED'
    | 'INVALID_INFRA_CONFIGURATION'
    | 'TEMPLATES_LINKED'
    | 'USER_HAS_NO_PERMISSIONS'
    | 'USER_NOT_AUTHORIZED'
    | 'USER_ALREADY_PRESENT'
    | 'INVALID_USAGE_RESTRICTION'
    | 'USAGE_RESTRICTION_ERROR'
    | 'STATE_EXECUTION_INSTANCE_NOT_FOUND'
    | 'DELEGATE_TASK_RETRY'
    | 'KUBERNETES_API_TASK_EXCEPTION'
    | 'KUBERNETES_TASK_EXCEPTION'
    | 'KUBERNETES_YAML_ERROR'
    | 'SAVE_FILE_INTO_GCP_STORAGE_FAILED'
    | 'READ_FILE_FROM_GCP_STORAGE_FAILED'
    | 'FILE_NOT_FOUND_ERROR'
    | 'USAGE_LIMITS_EXCEEDED'
    | 'EVENT_PUBLISH_FAILED'
    | 'JIRA_ERROR'
    | 'EXPRESSION_EVALUATION_FAILED'
    | 'KUBERNETES_VALUES_ERROR'
    | 'KUBERNETES_CLUSTER_ERROR'
    | 'INCORRECT_SIGN_IN_MECHANISM'
    | 'OAUTH_LOGIN_FAILED'
    | 'INVALID_TERRAFORM_TARGETS_REQUEST'
    | 'TERRAFORM_EXECUTION_ERROR'
    | 'FILE_READ_FAILED'
    | 'FILE_SIZE_EXCEEDS_LIMIT'
    | 'CLUSTER_NOT_FOUND'
    | 'MARKETPLACE_TOKEN_NOT_FOUND'
    | 'INVALID_MARKETPLACE_TOKEN'
    | 'INVALID_TICKETING_SERVER'
    | 'SERVICENOW_ERROR'
    | 'PASSWORD_EXPIRED'
    | 'USER_LOCKED'
    | 'PASSWORD_STRENGTH_CHECK_FAILED'
    | 'ACCOUNT_DISABLED'
    | 'INVALID_ACCOUNT_PERMISSION'
    | 'PAGERDUTY_ERROR'
    | 'HEALTH_ERROR'
    | 'SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED'
    | 'DOMAIN_WHITELIST_FILTER_CHECK_FAILED'
    | 'INVALID_DASHBOARD_UPDATE_REQUEST'
    | 'DUPLICATE_FIELD'
    | 'INVALID_AZURE_VAULT_CONFIGURATION'
    | 'USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS'
    | 'INVALID_ROLLBACK'
    | 'DATA_COLLECTION_ERROR'
    | 'SUMO_DATA_COLLECTION_ERROR'
    | 'DEPLOYMENT_GOVERNANCE_ERROR'
    | 'BATCH_PROCESSING_ERROR'
    | 'GRAPHQL_ERROR'
    | 'FILE_CREATE_ERROR'
    | 'ILLEGAL_STATE'
    | 'GIT_DIFF_COMMIT_NOT_IN_ORDER'
    | 'FAILED_TO_ACQUIRE_PERSISTENT_LOCK'
    | 'FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK'
    | 'POD_NOT_FOUND_ERROR'
    | 'COMMAND_EXECUTION_ERROR'
    | 'REGISTRY_EXCEPTION'
    | 'ENGINE_INTERRUPT_PROCESSING_EXCEPTION'
    | 'ENGINE_IO_EXCEPTION'
    | 'ENGINE_OUTCOME_EXCEPTION'
    | 'ENGINE_SWEEPING_OUTPUT_EXCEPTION'
    | 'CACHE_NOT_FOUND_EXCEPTION'
    | 'ENGINE_ENTITY_UPDATE_EXCEPTION'
    | 'SHELL_EXECUTION_EXCEPTION'
    | 'TEMPLATE_NOT_FOUND'
    | 'AZURE_SERVICE_EXCEPTION'
    | 'AZURE_CLIENT_EXCEPTION'
    | 'GIT_UNSEEN_REMOTE_HEAD_COMMIT'
    | 'TIMEOUT_ENGINE_EXCEPTION'
    | 'NO_AVAILABLE_DELEGATES'
    | 'NO_INSTALLED_DELEGATES'
    | 'DUPLICATE_DELEGATE_EXCEPTION'
    | 'GCP_MARKETPLACE_EXCEPTION'
    | 'MISSING_DEFAULT_GOOGLE_CREDENTIALS'
    | 'INCORRECT_DEFAULT_GOOGLE_CREDENTIALS'
    | 'OPTIMISTIC_LOCKING_EXCEPTION'
    | 'NG_PIPELINE_EXECUTION_EXCEPTION'
    | 'NG_PIPELINE_CREATE_EXCEPTION'
    | 'RESOURCE_NOT_FOUND_EXCEPTION'
    | 'PMS_INITIALIZE_SDK_EXCEPTION'
    | 'UNEXPECTED_SNIPPET_EXCEPTION'
    | 'UNEXPECTED_SCHEMA_EXCEPTION'
    | 'CONNECTOR_VALIDATION_EXCEPTION'
    | 'TIMESCALE_NOT_AVAILABLE'
    | 'MIGRATION_EXCEPTION'
    | 'REQUEST_PROCESSING_INTERRUPTED'
    | 'SECRET_MANAGER_ID_NOT_FOUND'
    | 'GCP_SECRET_MANAGER_OPERATION_ERROR'
    | 'GCP_SECRET_OPERATION_ERROR'
    | 'GIT_OPERATION_ERROR'
    | 'TASK_FAILURE_ERROR'
    | 'INSTANCE_STATS_PROCESS_ERROR'
    | 'INSTANCE_STATS_MIGRATION_ERROR'
    | 'DEPLOYMENT_MIGRATION_ERROR'
    | 'CG_LICENSE_USAGE_ERROR'
    | 'INSTANCE_STATS_AGGREGATION_ERROR'
    | 'UNRESOLVED_EXPRESSIONS_ERROR'
    | 'KRYO_HANDLER_NOT_FOUND_ERROR'
    | 'DELEGATE_ERROR_HANDLER_EXCEPTION'
    | 'UNEXPECTED_TYPE_ERROR'
    | 'EXCEPTION_HANDLER_NOT_FOUND'
    | 'CONNECTOR_NOT_FOUND_EXCEPTION'
    | 'GCP_SERVER_ERROR'
    | 'HTTP_RESPONSE_EXCEPTION'
    | 'SCM_NOT_FOUND_ERROR'
    | 'SCM_CONFLICT_ERROR'
    | 'SCM_UNPROCESSABLE_ENTITY'
    | 'PROCESS_EXECUTION_EXCEPTION'
    | 'SCM_UNAUTHORIZED'
    | 'SCM_INTERNAL_SERVER_ERROR'
    | 'DATA'
    | 'CONTEXT'
    | 'PR_CREATION_ERROR'
    | 'URL_NOT_REACHABLE'
    | 'URL_NOT_PROVIDED'
    | 'ENGINE_EXPRESSION_EVALUATION_ERROR'
    | 'ENGINE_FUNCTOR_ERROR'
    | 'JIRA_CLIENT_ERROR'
    | 'SCM_NOT_MODIFIED'
    | 'APPROVAL_STEP_NG_ERROR'
    | 'BUCKET_SERVER_ERROR'
    | 'GIT_SYNC_ERROR'
    | 'TEMPLATE_EXCEPTION'
    | 'ENTITY_REFERENCE_EXCEPTION'
    | 'INVALID_INPUT_SET'
    | 'INVALID_OVERLAY_INPUT_SET'
    | 'RESOURCE_ALREADY_EXISTS'
    | 'INVALID_JSON_PAYLOAD'
    | 'POLICY_EVALUATION_FAILURE'
    | 'POLICY_SET_ERROR'
  correlationId?: string
  detailedMessage?: string
  message?: string
  metadata?: ErrorMetadataDTO
  responseMessages?: ResponseMessage[]
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ErrorMetadataDTO {
  type?: string
}

export interface Failure {
  code?:
    | 'DEFAULT_ERROR_CODE'
    | 'INVALID_ARGUMENT'
    | 'INVALID_EMAIL'
    | 'DOMAIN_NOT_ALLOWED_TO_REGISTER'
    | 'COMMNITY_EDITION_NOT_FOUND'
    | 'DEPLOY_MODE_IS_NOT_ON_PREM'
    | 'USER_ALREADY_REGISTERED'
    | 'USER_INVITATION_DOES_NOT_EXIST'
    | 'USER_DOES_NOT_EXIST'
    | 'USER_INVITE_OPERATION_FAILED'
    | 'USER_DISABLED'
    | 'ACCOUNT_DOES_NOT_EXIST'
    | 'INACTIVE_ACCOUNT'
    | 'ACCOUNT_MIGRATED'
    | 'USER_DOMAIN_NOT_ALLOWED'
    | 'MAX_FAILED_ATTEMPT_COUNT_EXCEEDED'
    | 'RESOURCE_NOT_FOUND'
    | 'INVALID_FORMAT'
    | 'ROLE_DOES_NOT_EXIST'
    | 'EMAIL_NOT_VERIFIED'
    | 'EMAIL_VERIFICATION_TOKEN_NOT_FOUND'
    | 'INVALID_TOKEN'
    | 'REVOKED_TOKEN'
    | 'INVALID_CAPTCHA_TOKEN'
    | 'NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS'
    | 'EXPIRED_TOKEN'
    | 'TOKEN_ALREADY_REFRESHED_ONCE'
    | 'ACCESS_DENIED'
    | 'NG_ACCESS_DENIED'
    | 'INVALID_CREDENTIAL'
    | 'INVALID_CREDENTIALS_THIRD_PARTY'
    | 'INVALID_KEY'
    | 'INVALID_CONNECTOR_TYPE'
    | 'INVALID_KEYPATH'
    | 'INVALID_VARIABLE'
    | 'UNKNOWN_HOST'
    | 'UNREACHABLE_HOST'
    | 'INVALID_PORT'
    | 'SSH_SESSION_TIMEOUT'
    | 'SOCKET_CONNECTION_ERROR'
    | 'CONNECTION_ERROR'
    | 'SOCKET_CONNECTION_TIMEOUT'
    | 'CONNECTION_TIMEOUT'
    | 'SSH_CONNECTION_ERROR'
    | 'USER_GROUP_ERROR'
    | 'INVALID_EXECUTION_ID'
    | 'ERROR_IN_GETTING_CHANNEL_STREAMS'
    | 'UNEXPECTED'
    | 'UNKNOWN_ERROR'
    | 'UNKNOWN_EXECUTOR_TYPE_ERROR'
    | 'DUPLICATE_STATE_NAMES'
    | 'TRANSITION_NOT_LINKED'
    | 'TRANSITION_TO_INCORRECT_STATE'
    | 'TRANSITION_TYPE_NULL'
    | 'STATES_WITH_DUP_TRANSITIONS'
    | 'BARRIERS_NOT_RUNNING_CONCURRENTLY'
    | 'NON_FORK_STATES'
    | 'NON_REPEAT_STATES'
    | 'INITIAL_STATE_NOT_DEFINED'
    | 'FILE_INTEGRITY_CHECK_FAILED'
    | 'INVALID_URL'
    | 'FILE_DOWNLOAD_FAILED'
    | 'PLATFORM_SOFTWARE_DELETE_ERROR'
    | 'INVALID_CSV_FILE'
    | 'INVALID_REQUEST'
    | 'SCHEMA_VALIDATION_FAILED'
    | 'FILTER_CREATION_ERROR'
    | 'INVALID_YAML_ERROR'
    | 'PLAN_CREATION_ERROR'
    | 'INVALID_INFRA_STATE'
    | 'PIPELINE_ALREADY_TRIGGERED'
    | 'NON_EXISTING_PIPELINE'
    | 'DUPLICATE_COMMAND_NAMES'
    | 'INVALID_PIPELINE'
    | 'COMMAND_DOES_NOT_EXIST'
    | 'DUPLICATE_ARTIFACTSTREAM_NAMES'
    | 'DUPLICATE_HOST_NAMES'
    | 'STATE_NOT_FOR_TYPE'
    | 'STATE_MACHINE_ISSUE'
    | 'STATE_DISCONTINUE_FAILED'
    | 'STATE_PAUSE_FAILED'
    | 'PAUSE_ALL_ALREADY'
    | 'RESUME_ALL_ALREADY'
    | 'ROLLBACK_ALREADY'
    | 'ABORT_ALL_ALREADY'
    | 'EXPIRE_ALL_ALREADY'
    | 'RETRY_FAILED'
    | 'UNKNOWN_ARTIFACT_TYPE'
    | 'UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE'
    | 'INIT_TIMEOUT'
    | 'LICENSE_EXPIRED'
    | 'NOT_LICENSED'
    | 'REQUEST_TIMEOUT'
    | 'WORKFLOW_ALREADY_TRIGGERED'
    | 'JENKINS_ERROR'
    | 'INVALID_ARTIFACT_SOURCE'
    | 'INVALID_ARTIFACT_SERVER'
    | 'INVALID_CLOUD_PROVIDER'
    | 'UPDATE_NOT_ALLOWED'
    | 'DELETE_NOT_ALLOWED'
    | 'APPDYNAMICS_CONFIGURATION_ERROR'
    | 'APM_CONFIGURATION_ERROR'
    | 'SPLUNK_CONFIGURATION_ERROR'
    | 'ELK_CONFIGURATION_ERROR'
    | 'LOGZ_CONFIGURATION_ERROR'
    | 'SUMO_CONFIGURATION_ERROR'
    | 'INSTANA_CONFIGURATION_ERROR'
    | 'APPDYNAMICS_ERROR'
    | 'STACKDRIVER_ERROR'
    | 'STACKDRIVER_CONFIGURATION_ERROR'
    | 'NEWRELIC_CONFIGURATION_ERROR'
    | 'NEWRELIC_ERROR'
    | 'DYNA_TRACE_CONFIGURATION_ERROR'
    | 'DYNA_TRACE_ERROR'
    | 'CLOUDWATCH_ERROR'
    | 'CLOUDWATCH_CONFIGURATION_ERROR'
    | 'PROMETHEUS_CONFIGURATION_ERROR'
    | 'DATA_DOG_CONFIGURATION_ERROR'
    | 'SERVICE_GUARD_CONFIGURATION_ERROR'
    | 'ENCRYPTION_NOT_CONFIGURED'
    | 'UNAVAILABLE_DELEGATES'
    | 'WORKFLOW_EXECUTION_IN_PROGRESS'
    | 'PIPELINE_EXECUTION_IN_PROGRESS'
    | 'AWS_ACCESS_DENIED'
    | 'AWS_CLUSTER_NOT_FOUND'
    | 'AWS_SERVICE_NOT_FOUND'
    | 'IMAGE_NOT_FOUND'
    | 'ILLEGAL_ARGUMENT'
    | 'IMAGE_TAG_NOT_FOUND'
    | 'DELEGATE_NOT_AVAILABLE'
    | 'INVALID_YAML_PAYLOAD'
    | 'AUTHENTICATION_ERROR'
    | 'AUTHORIZATION_ERROR'
    | 'UNRECOGNIZED_YAML_FIELDS'
    | 'COULD_NOT_MAP_BEFORE_YAML'
    | 'MISSING_BEFORE_YAML'
    | 'MISSING_YAML'
    | 'NON_EMPTY_DELETIONS'
    | 'GENERAL_YAML_ERROR'
    | 'GENERAL_YAML_INFO'
    | 'YAML_GIT_SYNC_ERROR'
    | 'GIT_CONNECTION_ERROR'
    | 'GIT_ERROR'
    | 'ARTIFACT_SERVER_ERROR'
    | 'ENCRYPT_DECRYPT_ERROR'
    | 'SECRET_MANAGEMENT_ERROR'
    | 'SECRET_NOT_FOUND'
    | 'KMS_OPERATION_ERROR'
    | 'GCP_KMS_OPERATION_ERROR'
    | 'VAULT_OPERATION_ERROR'
    | 'AWS_SECRETS_MANAGER_OPERATION_ERROR'
    | 'AZURE_KEY_VAULT_OPERATION_ERROR'
    | 'CYBERARK_OPERATION_ERROR'
    | 'UNSUPPORTED_OPERATION_EXCEPTION'
    | 'FEATURE_UNAVAILABLE'
    | 'GENERAL_ERROR'
    | 'BASELINE_CONFIGURATION_ERROR'
    | 'SAML_IDP_CONFIGURATION_NOT_AVAILABLE'
    | 'INVALID_AUTHENTICATION_MECHANISM'
    | 'INVALID_SAML_CONFIGURATION'
    | 'INVALID_OAUTH_CONFIGURATION'
    | 'INVALID_LDAP_CONFIGURATION'
    | 'USER_GROUP_SYNC_FAILURE'
    | 'USER_GROUP_ALREADY_EXIST'
    | 'INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION'
    | 'EXPLANATION'
    | 'HINT'
    | 'NOT_WHITELISTED_IP'
    | 'INVALID_TOTP_TOKEN'
    | 'EMAIL_FAILED'
    | 'SSL_HANDSHAKE_FAILED'
    | 'NO_APPS_ASSIGNED'
    | 'INVALID_INFRA_CONFIGURATION'
    | 'TEMPLATES_LINKED'
    | 'USER_HAS_NO_PERMISSIONS'
    | 'USER_NOT_AUTHORIZED'
    | 'USER_ALREADY_PRESENT'
    | 'INVALID_USAGE_RESTRICTION'
    | 'USAGE_RESTRICTION_ERROR'
    | 'STATE_EXECUTION_INSTANCE_NOT_FOUND'
    | 'DELEGATE_TASK_RETRY'
    | 'KUBERNETES_API_TASK_EXCEPTION'
    | 'KUBERNETES_TASK_EXCEPTION'
    | 'KUBERNETES_YAML_ERROR'
    | 'SAVE_FILE_INTO_GCP_STORAGE_FAILED'
    | 'READ_FILE_FROM_GCP_STORAGE_FAILED'
    | 'FILE_NOT_FOUND_ERROR'
    | 'USAGE_LIMITS_EXCEEDED'
    | 'EVENT_PUBLISH_FAILED'
    | 'JIRA_ERROR'
    | 'EXPRESSION_EVALUATION_FAILED'
    | 'KUBERNETES_VALUES_ERROR'
    | 'KUBERNETES_CLUSTER_ERROR'
    | 'INCORRECT_SIGN_IN_MECHANISM'
    | 'OAUTH_LOGIN_FAILED'
    | 'INVALID_TERRAFORM_TARGETS_REQUEST'
    | 'TERRAFORM_EXECUTION_ERROR'
    | 'FILE_READ_FAILED'
    | 'FILE_SIZE_EXCEEDS_LIMIT'
    | 'CLUSTER_NOT_FOUND'
    | 'MARKETPLACE_TOKEN_NOT_FOUND'
    | 'INVALID_MARKETPLACE_TOKEN'
    | 'INVALID_TICKETING_SERVER'
    | 'SERVICENOW_ERROR'
    | 'PASSWORD_EXPIRED'
    | 'USER_LOCKED'
    | 'PASSWORD_STRENGTH_CHECK_FAILED'
    | 'ACCOUNT_DISABLED'
    | 'INVALID_ACCOUNT_PERMISSION'
    | 'PAGERDUTY_ERROR'
    | 'HEALTH_ERROR'
    | 'SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED'
    | 'DOMAIN_WHITELIST_FILTER_CHECK_FAILED'
    | 'INVALID_DASHBOARD_UPDATE_REQUEST'
    | 'DUPLICATE_FIELD'
    | 'INVALID_AZURE_VAULT_CONFIGURATION'
    | 'USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS'
    | 'INVALID_ROLLBACK'
    | 'DATA_COLLECTION_ERROR'
    | 'SUMO_DATA_COLLECTION_ERROR'
    | 'DEPLOYMENT_GOVERNANCE_ERROR'
    | 'BATCH_PROCESSING_ERROR'
    | 'GRAPHQL_ERROR'
    | 'FILE_CREATE_ERROR'
    | 'ILLEGAL_STATE'
    | 'GIT_DIFF_COMMIT_NOT_IN_ORDER'
    | 'FAILED_TO_ACQUIRE_PERSISTENT_LOCK'
    | 'FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK'
    | 'POD_NOT_FOUND_ERROR'
    | 'COMMAND_EXECUTION_ERROR'
    | 'REGISTRY_EXCEPTION'
    | 'ENGINE_INTERRUPT_PROCESSING_EXCEPTION'
    | 'ENGINE_IO_EXCEPTION'
    | 'ENGINE_OUTCOME_EXCEPTION'
    | 'ENGINE_SWEEPING_OUTPUT_EXCEPTION'
    | 'CACHE_NOT_FOUND_EXCEPTION'
    | 'ENGINE_ENTITY_UPDATE_EXCEPTION'
    | 'SHELL_EXECUTION_EXCEPTION'
    | 'TEMPLATE_NOT_FOUND'
    | 'AZURE_SERVICE_EXCEPTION'
    | 'AZURE_CLIENT_EXCEPTION'
    | 'GIT_UNSEEN_REMOTE_HEAD_COMMIT'
    | 'TIMEOUT_ENGINE_EXCEPTION'
    | 'NO_AVAILABLE_DELEGATES'
    | 'NO_INSTALLED_DELEGATES'
    | 'DUPLICATE_DELEGATE_EXCEPTION'
    | 'GCP_MARKETPLACE_EXCEPTION'
    | 'MISSING_DEFAULT_GOOGLE_CREDENTIALS'
    | 'INCORRECT_DEFAULT_GOOGLE_CREDENTIALS'
    | 'OPTIMISTIC_LOCKING_EXCEPTION'
    | 'NG_PIPELINE_EXECUTION_EXCEPTION'
    | 'NG_PIPELINE_CREATE_EXCEPTION'
    | 'RESOURCE_NOT_FOUND_EXCEPTION'
    | 'PMS_INITIALIZE_SDK_EXCEPTION'
    | 'UNEXPECTED_SNIPPET_EXCEPTION'
    | 'UNEXPECTED_SCHEMA_EXCEPTION'
    | 'CONNECTOR_VALIDATION_EXCEPTION'
    | 'TIMESCALE_NOT_AVAILABLE'
    | 'MIGRATION_EXCEPTION'
    | 'REQUEST_PROCESSING_INTERRUPTED'
    | 'SECRET_MANAGER_ID_NOT_FOUND'
    | 'GCP_SECRET_MANAGER_OPERATION_ERROR'
    | 'GCP_SECRET_OPERATION_ERROR'
    | 'GIT_OPERATION_ERROR'
    | 'TASK_FAILURE_ERROR'
    | 'INSTANCE_STATS_PROCESS_ERROR'
    | 'INSTANCE_STATS_MIGRATION_ERROR'
    | 'DEPLOYMENT_MIGRATION_ERROR'
    | 'CG_LICENSE_USAGE_ERROR'
    | 'INSTANCE_STATS_AGGREGATION_ERROR'
    | 'UNRESOLVED_EXPRESSIONS_ERROR'
    | 'KRYO_HANDLER_NOT_FOUND_ERROR'
    | 'DELEGATE_ERROR_HANDLER_EXCEPTION'
    | 'UNEXPECTED_TYPE_ERROR'
    | 'EXCEPTION_HANDLER_NOT_FOUND'
    | 'CONNECTOR_NOT_FOUND_EXCEPTION'
    | 'GCP_SERVER_ERROR'
    | 'HTTP_RESPONSE_EXCEPTION'
    | 'SCM_NOT_FOUND_ERROR'
    | 'SCM_CONFLICT_ERROR'
    | 'SCM_UNPROCESSABLE_ENTITY'
    | 'PROCESS_EXECUTION_EXCEPTION'
    | 'SCM_UNAUTHORIZED'
    | 'SCM_INTERNAL_SERVER_ERROR'
    | 'DATA'
    | 'CONTEXT'
    | 'PR_CREATION_ERROR'
    | 'URL_NOT_REACHABLE'
    | 'URL_NOT_PROVIDED'
    | 'ENGINE_EXPRESSION_EVALUATION_ERROR'
    | 'ENGINE_FUNCTOR_ERROR'
    | 'JIRA_CLIENT_ERROR'
    | 'SCM_NOT_MODIFIED'
    | 'APPROVAL_STEP_NG_ERROR'
    | 'BUCKET_SERVER_ERROR'
    | 'GIT_SYNC_ERROR'
    | 'TEMPLATE_EXCEPTION'
    | 'ENTITY_REFERENCE_EXCEPTION'
    | 'INVALID_INPUT_SET'
    | 'INVALID_OVERLAY_INPUT_SET'
    | 'RESOURCE_ALREADY_EXISTS'
    | 'INVALID_JSON_PAYLOAD'
    | 'POLICY_EVALUATION_FAILURE'
    | 'POLICY_SET_ERROR'
  correlationId?: string
  errors?: ValidationError[]
  message?: string
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface FieldDescriptor {
  containingOneof?: OneofDescriptor
  containingType?: Descriptor
  defaultValue?: { [key: string]: any }
  enumType?: EnumDescriptor
  extension?: boolean
  extensionScope?: Descriptor
  file?: FileDescriptor
  fullName?: string
  index?: number
  javaType?: 'INT' | 'LONG' | 'FLOAT' | 'DOUBLE' | 'BOOLEAN' | 'STRING' | 'BYTE_STRING' | 'ENUM' | 'MESSAGE'
  jsonName?: string
  liteJavaType?: 'INT' | 'LONG' | 'FLOAT' | 'DOUBLE' | 'BOOLEAN' | 'STRING' | 'BYTE_STRING' | 'ENUM' | 'MESSAGE'
  liteType?:
    | 'DOUBLE'
    | 'FLOAT'
    | 'INT64'
    | 'UINT64'
    | 'INT32'
    | 'FIXED64'
    | 'FIXED32'
    | 'BOOL'
    | 'STRING'
    | 'GROUP'
    | 'MESSAGE'
    | 'BYTES'
    | 'UINT32'
    | 'ENUM'
    | 'SFIXED32'
    | 'SFIXED64'
    | 'SINT32'
    | 'SINT64'
  mapField?: boolean
  messageType?: Descriptor
  name?: string
  number?: number
  optional?: boolean
  options?: FieldOptions
  packable?: boolean
  packed?: boolean
  repeated?: boolean
  required?: boolean
  type?:
    | 'DOUBLE'
    | 'FLOAT'
    | 'INT64'
    | 'UINT64'
    | 'INT32'
    | 'FIXED64'
    | 'FIXED32'
    | 'BOOL'
    | 'STRING'
    | 'GROUP'
    | 'MESSAGE'
    | 'BYTES'
    | 'UINT32'
    | 'ENUM'
    | 'SFIXED32'
    | 'SFIXED64'
    | 'SINT32'
    | 'SINT64'
}

export interface FieldOptions {
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  allFieldsRaw?: {
    [key: string]: { [key: string]: any }
  }
  ctype?: 'STRING' | 'CORD' | 'STRING_PIECE'
  defaultInstanceForType?: FieldOptions
  deprecated?: boolean
  descriptorForType?: Descriptor
  initializationErrorString?: string
  initialized?: boolean
  jstype?: 'JS_NORMAL' | 'JS_STRING' | 'JS_NUMBER'
  lazy?: boolean
  packed?: boolean
  parserForType?: ParserFieldOptions
  serializedSize?: number
  uninterpretedOptionCount?: number
  uninterpretedOptionList?: UninterpretedOption[]
  uninterpretedOptionOrBuilderList?: UninterpretedOptionOrBuilder[]
  unknownFields?: UnknownFieldSet
  weak?: boolean
}

export interface FileDescriptor {
  dependencies?: FileDescriptor[]
  enumTypes?: EnumDescriptor[]
  extensions?: FieldDescriptor[]
  file?: FileDescriptor
  fullName?: string
  messageTypes?: Descriptor[]
  name?: string
  options?: FileOptions
  package?: string
  publicDependencies?: FileDescriptor[]
  services?: ServiceDescriptor[]
  syntax?: 'UNKNOWN' | 'PROTO2' | 'PROTO3'
}

export interface FileOptions {
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  allFieldsRaw?: {
    [key: string]: { [key: string]: any }
  }
  ccEnableArenas?: boolean
  ccGenericServices?: boolean
  csharpNamespace?: string
  csharpNamespaceBytes?: ByteString
  defaultInstanceForType?: FileOptions
  deprecated?: boolean
  descriptorForType?: Descriptor
  goPackage?: string
  goPackageBytes?: ByteString
  initializationErrorString?: string
  initialized?: boolean
  javaGenerateEqualsAndHash?: boolean
  javaGenericServices?: boolean
  javaMultipleFiles?: boolean
  javaOuterClassname?: string
  javaOuterClassnameBytes?: ByteString
  javaPackage?: string
  javaPackageBytes?: ByteString
  javaStringCheckUtf8?: boolean
  objcClassPrefix?: string
  objcClassPrefixBytes?: ByteString
  optimizeFor?: 'SPEED' | 'CODE_SIZE' | 'LITE_RUNTIME'
  parserForType?: ParserFileOptions
  phpClassPrefix?: string
  phpClassPrefixBytes?: ByteString
  phpGenericServices?: boolean
  phpMetadataNamespace?: string
  phpMetadataNamespaceBytes?: ByteString
  phpNamespace?: string
  phpNamespaceBytes?: ByteString
  pyGenericServices?: boolean
  rubyPackage?: string
  rubyPackageBytes?: ByteString
  serializedSize?: number
  swiftPrefix?: string
  swiftPrefixBytes?: ByteString
  uninterpretedOptionCount?: number
  uninterpretedOptionList?: UninterpretedOption[]
  uninterpretedOptionOrBuilderList?: UninterpretedOptionOrBuilder[]
  unknownFields?: UnknownFieldSet
}

export interface FilterDTO {
  filterProperties: FilterProperties
  filterVisibility?: 'EveryOne' | 'OnlyCreator'
  identifier: string
  name: string
  orgIdentifier?: string
  projectIdentifier?: string
}

export interface FilterProperties {
  filterType?:
    | 'Connector'
    | 'DelegateProfile'
    | 'Delegate'
    | 'PipelineSetup'
    | 'PipelineExecution'
    | 'Deployment'
    | 'Audit'
    | 'Template'
  tags?: {
    [key: string]: string
  }
}

export interface IdentifierRefProtoDTO {
  accountIdentifier?: StringValue
  accountIdentifierOrBuilder?: StringValueOrBuilder
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  defaultInstanceForType?: IdentifierRefProtoDTO
  descriptorForType?: Descriptor
  identifier?: StringValue
  identifierOrBuilder?: StringValueOrBuilder
  initializationErrorString?: string
  initialized?: boolean
  metadata?: {
    [key: string]: string
  }
  metadataCount?: number
  metadataMap?: {
    [key: string]: string
  }
  orgIdentifier?: StringValue
  orgIdentifierOrBuilder?: StringValueOrBuilder
  parserForType?: ParserIdentifierRefProtoDTO
  projectIdentifier?: StringValue
  projectIdentifierOrBuilder?: StringValueOrBuilder
  scope?: 'ACCOUNT' | 'ORG' | 'PROJECT' | 'UNKNOWN' | 'UNRECOGNIZED'
  scopeValue?: number
  serializedSize?: number
  unknownFields?: UnknownFieldSet
}

export interface IdentifierRefProtoDTOOrBuilder {
  accountIdentifier?: StringValue
  accountIdentifierOrBuilder?: StringValueOrBuilder
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  defaultInstanceForType?: Message
  descriptorForType?: Descriptor
  identifier?: StringValue
  identifierOrBuilder?: StringValueOrBuilder
  initializationErrorString?: string
  initialized?: boolean
  metadata?: {
    [key: string]: string
  }
  metadataCount?: number
  metadataMap?: {
    [key: string]: string
  }
  orgIdentifier?: StringValue
  orgIdentifierOrBuilder?: StringValueOrBuilder
  projectIdentifier?: StringValue
  projectIdentifierOrBuilder?: StringValueOrBuilder
  scope?: 'ACCOUNT' | 'ORG' | 'PROJECT' | 'UNKNOWN' | 'UNRECOGNIZED'
  scopeValue?: number
  unknownFields?: UnknownFieldSet
}

export interface InputSetReferenceProtoDTO {
  accountIdentifier?: StringValue
  accountIdentifierOrBuilder?: StringValueOrBuilder
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  defaultInstanceForType?: InputSetReferenceProtoDTO
  descriptorForType?: Descriptor
  identifier?: StringValue
  identifierOrBuilder?: StringValueOrBuilder
  initializationErrorString?: string
  initialized?: boolean
  orgIdentifier?: StringValue
  orgIdentifierOrBuilder?: StringValueOrBuilder
  parserForType?: ParserInputSetReferenceProtoDTO
  pipelineIdentifier?: StringValue
  pipelineIdentifierOrBuilder?: StringValueOrBuilder
  projectIdentifier?: StringValue
  projectIdentifierOrBuilder?: StringValueOrBuilder
  serializedSize?: number
  unknownFields?: UnknownFieldSet
}

export interface InputSetReferenceProtoDTOOrBuilder {
  accountIdentifier?: StringValue
  accountIdentifierOrBuilder?: StringValueOrBuilder
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  defaultInstanceForType?: Message
  descriptorForType?: Descriptor
  identifier?: StringValue
  identifierOrBuilder?: StringValueOrBuilder
  initializationErrorString?: string
  initialized?: boolean
  orgIdentifier?: StringValue
  orgIdentifierOrBuilder?: StringValueOrBuilder
  pipelineIdentifier?: StringValue
  pipelineIdentifierOrBuilder?: StringValueOrBuilder
  projectIdentifier?: StringValue
  projectIdentifierOrBuilder?: StringValueOrBuilder
  unknownFields?: UnknownFieldSet
}

export interface JsonNode {
  array?: boolean
  bigDecimal?: boolean
  bigInteger?: boolean
  binary?: boolean
  boolean?: boolean
  containerNode?: boolean
  double?: boolean
  float?: boolean
  floatingPointNumber?: boolean
  int?: boolean
  integralNumber?: boolean
  long?: boolean
  missingNode?: boolean
  nodeType?: 'ARRAY' | 'BINARY' | 'BOOLEAN' | 'MISSING' | 'NULL' | 'NUMBER' | 'OBJECT' | 'POJO' | 'STRING'
  null?: boolean
  number?: boolean
  object?: boolean
  pojo?: boolean
  short?: boolean
  textual?: boolean
  valueNode?: boolean
}

export interface Message {
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  defaultInstanceForType?: MessageLite
  descriptorForType?: Descriptor
  initializationErrorString?: string
  initialized?: boolean
  parserForType?: ParserMessage
  serializedSize?: number
  unknownFields?: UnknownFieldSet
}

export interface MessageLite {
  defaultInstanceForType?: MessageLite
  initialized?: boolean
  parserForType?: ParserMessageLite
  serializedSize?: number
}

export interface MessageOptions {
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  allFieldsRaw?: {
    [key: string]: { [key: string]: any }
  }
  defaultInstanceForType?: MessageOptions
  deprecated?: boolean
  descriptorForType?: Descriptor
  initializationErrorString?: string
  initialized?: boolean
  mapEntry?: boolean
  messageSetWireFormat?: boolean
  noStandardDescriptorAccessor?: boolean
  parserForType?: ParserMessageOptions
  serializedSize?: number
  uninterpretedOptionCount?: number
  uninterpretedOptionList?: UninterpretedOption[]
  uninterpretedOptionOrBuilderList?: UninterpretedOptionOrBuilder[]
  unknownFields?: UnknownFieldSet
}

export interface MethodDescriptor {
  clientStreaming?: boolean
  file?: FileDescriptor
  fullName?: string
  index?: number
  inputType?: Descriptor
  name?: string
  options?: MethodOptions
  outputType?: Descriptor
  serverStreaming?: boolean
  service?: ServiceDescriptor
}

export interface MethodOptions {
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  allFieldsRaw?: {
    [key: string]: { [key: string]: any }
  }
  defaultInstanceForType?: MethodOptions
  deprecated?: boolean
  descriptorForType?: Descriptor
  idempotencyLevel?: 'IDEMPOTENCY_UNKNOWN' | 'NO_SIDE_EFFECTS' | 'IDEMPOTENT'
  initializationErrorString?: string
  initialized?: boolean
  parserForType?: ParserMethodOptions
  serializedSize?: number
  uninterpretedOptionCount?: number
  uninterpretedOptionList?: UninterpretedOption[]
  uninterpretedOptionOrBuilderList?: UninterpretedOptionOrBuilder[]
  unknownFields?: UnknownFieldSet
}

export interface NGTag {
  key: string
  value: string
}

export interface NGTemplateConfig {
  template?: NGTemplateInfoConfig
}

export interface NGTemplateInfoConfig {
  description?: string
  identifier: string
  name: string
  orgIdentifier?: string
  projectIdentifier?: string
  spec?: JsonNode
  tags?: {
    [key: string]: string
  }
  type: 'Step' | 'Stage'
  versionLabel: string
}

export interface NamePart {
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  defaultInstanceForType?: NamePart
  descriptorForType?: Descriptor
  initializationErrorString?: string
  initialized?: boolean
  isExtension?: boolean
  namePart?: string
  namePartBytes?: ByteString
  parserForType?: ParserNamePart
  serializedSize?: number
  unknownFields?: UnknownFieldSet
}

export interface NamePartOrBuilder {
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  defaultInstanceForType?: Message
  descriptorForType?: Descriptor
  initializationErrorString?: string
  initialized?: boolean
  isExtension?: boolean
  namePart?: string
  namePartBytes?: ByteString
  unknownFields?: UnknownFieldSet
}

export interface OneofDescriptor {
  containingType?: Descriptor
  fieldCount?: number
  fields?: FieldDescriptor[]
  file?: FileDescriptor
  fullName?: string
  index?: number
  name?: string
  options?: OneofOptions
}

export interface OneofOptions {
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  allFieldsRaw?: {
    [key: string]: { [key: string]: any }
  }
  defaultInstanceForType?: OneofOptions
  descriptorForType?: Descriptor
  initializationErrorString?: string
  initialized?: boolean
  parserForType?: ParserOneofOptions
  serializedSize?: number
  uninterpretedOptionCount?: number
  uninterpretedOptionList?: UninterpretedOption[]
  uninterpretedOptionOrBuilderList?: UninterpretedOptionOrBuilder[]
  unknownFields?: UnknownFieldSet
}

export interface Page {
  content?: { [key: string]: any }[]
  empty?: boolean
  first?: boolean
  last?: boolean
  number?: number
  numberOfElements?: number
  pageable?: Pageable
  size?: number
  sort?: Sort
  totalElements?: number
  totalPages?: number
}

export interface PageFilterDTO {
  content?: FilterDTO[]
  empty?: boolean
  pageIndex?: number
  pageItemCount?: number
  pageSize?: number
  totalItems?: number
  totalPages?: number
}

export interface PageTemplateSummaryResponse {
  content?: TemplateSummaryResponse[]
  empty?: boolean
  first?: boolean
  last?: boolean
  number?: number
  numberOfElements?: number
  pageable?: Pageable
  size?: number
  sort?: Sort
  totalElements?: number
  totalPages?: number
}

export interface Pageable {
  offset?: number
  pageNumber?: number
  pageSize?: number
  paged?: boolean
  sort?: Sort
  unpaged?: boolean
}

export interface Parser {
  [key: string]: any
}

export interface ParserEntityDetailProtoDTO {
  [key: string]: any
}

export interface ParserEnumOptions {
  [key: string]: any
}

export interface ParserEnumValueOptions {
  [key: string]: any
}

export interface ParserFieldOptions {
  [key: string]: any
}

export interface ParserFileOptions {
  [key: string]: any
}

export interface ParserIdentifierRefProtoDTO {
  [key: string]: any
}

export interface ParserInputSetReferenceProtoDTO {
  [key: string]: any
}

export interface ParserMessage {
  [key: string]: any
}

export interface ParserMessageLite {
  [key: string]: any
}

export interface ParserMessageOptions {
  [key: string]: any
}

export interface ParserMethodOptions {
  [key: string]: any
}

export interface ParserNamePart {
  [key: string]: any
}

export interface ParserOneofOptions {
  [key: string]: any
}

export interface ParserServiceOptions {
  [key: string]: any
}

export interface ParserStringValue {
  [key: string]: any
}

export interface ParserTemplateReferenceProtoDTO {
  [key: string]: any
}

export interface ParserUninterpretedOption {
  [key: string]: any
}

export interface ParserYamlOutputProperties {
  [key: string]: any
}

export interface ParserYamlProperties {
  [key: string]: any
}

export type PipelineFilterProperties = FilterProperties & {
  description?: string
  moduleProperties?: {
    [key: string]: { [key: string]: any }
  }
  name?: string
  pipelineIdentifiers?: string[]
  pipelineTags?: NGTag[]
}

export interface Principal {
  identifier: string
  type: 'USER' | 'SYSTEM' | 'API_KEY' | 'SERVICE_ACCOUNT'
}

export interface ResourceDTO {
  identifier: string
  labels?: {
    [key: string]: string
  }
  type:
    | 'ORGANIZATION'
    | 'PROJECT'
    | 'USER_GROUP'
    | 'SECRET'
    | 'RESOURCE_GROUP'
    | 'USER'
    | 'ROLE'
    | 'ROLE_ASSIGNMENT'
    | 'PIPELINE'
    | 'TRIGGER'
    | 'TEMPLATE'
    | 'INPUT_SET'
    | 'DELEGATE_CONFIGURATION'
    | 'SERVICE'
    | 'ENVIRONMENT'
    | 'DELEGATE'
    | 'SERVICE_ACCOUNT'
    | 'CONNECTOR'
    | 'API_KEY'
    | 'TOKEN'
    | 'DELEGATE_TOKEN'
}

export interface ResourceScopeDTO {
  accountIdentifier?: string
  labels?: {
    [key: string]: string
  }
  orgIdentifier?: string
  projectIdentifier?: string
}

export interface Response {
  correlationId?: string
  data?: { [key: string]: any }
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseBoolean {
  correlationId?: string
  data?: boolean
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseFilterDTO {
  correlationId?: string
  data?: FilterDTO
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseListEntityDetailProtoDTO {
  correlationId?: string
  data?: EntityDetailProtoDTO[]
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseMessage {
  code?:
    | 'DEFAULT_ERROR_CODE'
    | 'INVALID_ARGUMENT'
    | 'INVALID_EMAIL'
    | 'DOMAIN_NOT_ALLOWED_TO_REGISTER'
    | 'COMMNITY_EDITION_NOT_FOUND'
    | 'DEPLOY_MODE_IS_NOT_ON_PREM'
    | 'USER_ALREADY_REGISTERED'
    | 'USER_INVITATION_DOES_NOT_EXIST'
    | 'USER_DOES_NOT_EXIST'
    | 'USER_INVITE_OPERATION_FAILED'
    | 'USER_DISABLED'
    | 'ACCOUNT_DOES_NOT_EXIST'
    | 'INACTIVE_ACCOUNT'
    | 'ACCOUNT_MIGRATED'
    | 'USER_DOMAIN_NOT_ALLOWED'
    | 'MAX_FAILED_ATTEMPT_COUNT_EXCEEDED'
    | 'RESOURCE_NOT_FOUND'
    | 'INVALID_FORMAT'
    | 'ROLE_DOES_NOT_EXIST'
    | 'EMAIL_NOT_VERIFIED'
    | 'EMAIL_VERIFICATION_TOKEN_NOT_FOUND'
    | 'INVALID_TOKEN'
    | 'REVOKED_TOKEN'
    | 'INVALID_CAPTCHA_TOKEN'
    | 'NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS'
    | 'EXPIRED_TOKEN'
    | 'TOKEN_ALREADY_REFRESHED_ONCE'
    | 'ACCESS_DENIED'
    | 'NG_ACCESS_DENIED'
    | 'INVALID_CREDENTIAL'
    | 'INVALID_CREDENTIALS_THIRD_PARTY'
    | 'INVALID_KEY'
    | 'INVALID_CONNECTOR_TYPE'
    | 'INVALID_KEYPATH'
    | 'INVALID_VARIABLE'
    | 'UNKNOWN_HOST'
    | 'UNREACHABLE_HOST'
    | 'INVALID_PORT'
    | 'SSH_SESSION_TIMEOUT'
    | 'SOCKET_CONNECTION_ERROR'
    | 'CONNECTION_ERROR'
    | 'SOCKET_CONNECTION_TIMEOUT'
    | 'CONNECTION_TIMEOUT'
    | 'SSH_CONNECTION_ERROR'
    | 'USER_GROUP_ERROR'
    | 'INVALID_EXECUTION_ID'
    | 'ERROR_IN_GETTING_CHANNEL_STREAMS'
    | 'UNEXPECTED'
    | 'UNKNOWN_ERROR'
    | 'UNKNOWN_EXECUTOR_TYPE_ERROR'
    | 'DUPLICATE_STATE_NAMES'
    | 'TRANSITION_NOT_LINKED'
    | 'TRANSITION_TO_INCORRECT_STATE'
    | 'TRANSITION_TYPE_NULL'
    | 'STATES_WITH_DUP_TRANSITIONS'
    | 'BARRIERS_NOT_RUNNING_CONCURRENTLY'
    | 'NON_FORK_STATES'
    | 'NON_REPEAT_STATES'
    | 'INITIAL_STATE_NOT_DEFINED'
    | 'FILE_INTEGRITY_CHECK_FAILED'
    | 'INVALID_URL'
    | 'FILE_DOWNLOAD_FAILED'
    | 'PLATFORM_SOFTWARE_DELETE_ERROR'
    | 'INVALID_CSV_FILE'
    | 'INVALID_REQUEST'
    | 'SCHEMA_VALIDATION_FAILED'
    | 'FILTER_CREATION_ERROR'
    | 'INVALID_YAML_ERROR'
    | 'PLAN_CREATION_ERROR'
    | 'INVALID_INFRA_STATE'
    | 'PIPELINE_ALREADY_TRIGGERED'
    | 'NON_EXISTING_PIPELINE'
    | 'DUPLICATE_COMMAND_NAMES'
    | 'INVALID_PIPELINE'
    | 'COMMAND_DOES_NOT_EXIST'
    | 'DUPLICATE_ARTIFACTSTREAM_NAMES'
    | 'DUPLICATE_HOST_NAMES'
    | 'STATE_NOT_FOR_TYPE'
    | 'STATE_MACHINE_ISSUE'
    | 'STATE_DISCONTINUE_FAILED'
    | 'STATE_PAUSE_FAILED'
    | 'PAUSE_ALL_ALREADY'
    | 'RESUME_ALL_ALREADY'
    | 'ROLLBACK_ALREADY'
    | 'ABORT_ALL_ALREADY'
    | 'EXPIRE_ALL_ALREADY'
    | 'RETRY_FAILED'
    | 'UNKNOWN_ARTIFACT_TYPE'
    | 'UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE'
    | 'INIT_TIMEOUT'
    | 'LICENSE_EXPIRED'
    | 'NOT_LICENSED'
    | 'REQUEST_TIMEOUT'
    | 'WORKFLOW_ALREADY_TRIGGERED'
    | 'JENKINS_ERROR'
    | 'INVALID_ARTIFACT_SOURCE'
    | 'INVALID_ARTIFACT_SERVER'
    | 'INVALID_CLOUD_PROVIDER'
    | 'UPDATE_NOT_ALLOWED'
    | 'DELETE_NOT_ALLOWED'
    | 'APPDYNAMICS_CONFIGURATION_ERROR'
    | 'APM_CONFIGURATION_ERROR'
    | 'SPLUNK_CONFIGURATION_ERROR'
    | 'ELK_CONFIGURATION_ERROR'
    | 'LOGZ_CONFIGURATION_ERROR'
    | 'SUMO_CONFIGURATION_ERROR'
    | 'INSTANA_CONFIGURATION_ERROR'
    | 'APPDYNAMICS_ERROR'
    | 'STACKDRIVER_ERROR'
    | 'STACKDRIVER_CONFIGURATION_ERROR'
    | 'NEWRELIC_CONFIGURATION_ERROR'
    | 'NEWRELIC_ERROR'
    | 'DYNA_TRACE_CONFIGURATION_ERROR'
    | 'DYNA_TRACE_ERROR'
    | 'CLOUDWATCH_ERROR'
    | 'CLOUDWATCH_CONFIGURATION_ERROR'
    | 'PROMETHEUS_CONFIGURATION_ERROR'
    | 'DATA_DOG_CONFIGURATION_ERROR'
    | 'SERVICE_GUARD_CONFIGURATION_ERROR'
    | 'ENCRYPTION_NOT_CONFIGURED'
    | 'UNAVAILABLE_DELEGATES'
    | 'WORKFLOW_EXECUTION_IN_PROGRESS'
    | 'PIPELINE_EXECUTION_IN_PROGRESS'
    | 'AWS_ACCESS_DENIED'
    | 'AWS_CLUSTER_NOT_FOUND'
    | 'AWS_SERVICE_NOT_FOUND'
    | 'IMAGE_NOT_FOUND'
    | 'ILLEGAL_ARGUMENT'
    | 'IMAGE_TAG_NOT_FOUND'
    | 'DELEGATE_NOT_AVAILABLE'
    | 'INVALID_YAML_PAYLOAD'
    | 'AUTHENTICATION_ERROR'
    | 'AUTHORIZATION_ERROR'
    | 'UNRECOGNIZED_YAML_FIELDS'
    | 'COULD_NOT_MAP_BEFORE_YAML'
    | 'MISSING_BEFORE_YAML'
    | 'MISSING_YAML'
    | 'NON_EMPTY_DELETIONS'
    | 'GENERAL_YAML_ERROR'
    | 'GENERAL_YAML_INFO'
    | 'YAML_GIT_SYNC_ERROR'
    | 'GIT_CONNECTION_ERROR'
    | 'GIT_ERROR'
    | 'ARTIFACT_SERVER_ERROR'
    | 'ENCRYPT_DECRYPT_ERROR'
    | 'SECRET_MANAGEMENT_ERROR'
    | 'SECRET_NOT_FOUND'
    | 'KMS_OPERATION_ERROR'
    | 'GCP_KMS_OPERATION_ERROR'
    | 'VAULT_OPERATION_ERROR'
    | 'AWS_SECRETS_MANAGER_OPERATION_ERROR'
    | 'AZURE_KEY_VAULT_OPERATION_ERROR'
    | 'CYBERARK_OPERATION_ERROR'
    | 'UNSUPPORTED_OPERATION_EXCEPTION'
    | 'FEATURE_UNAVAILABLE'
    | 'GENERAL_ERROR'
    | 'BASELINE_CONFIGURATION_ERROR'
    | 'SAML_IDP_CONFIGURATION_NOT_AVAILABLE'
    | 'INVALID_AUTHENTICATION_MECHANISM'
    | 'INVALID_SAML_CONFIGURATION'
    | 'INVALID_OAUTH_CONFIGURATION'
    | 'INVALID_LDAP_CONFIGURATION'
    | 'USER_GROUP_SYNC_FAILURE'
    | 'USER_GROUP_ALREADY_EXIST'
    | 'INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION'
    | 'EXPLANATION'
    | 'HINT'
    | 'NOT_WHITELISTED_IP'
    | 'INVALID_TOTP_TOKEN'
    | 'EMAIL_FAILED'
    | 'SSL_HANDSHAKE_FAILED'
    | 'NO_APPS_ASSIGNED'
    | 'INVALID_INFRA_CONFIGURATION'
    | 'TEMPLATES_LINKED'
    | 'USER_HAS_NO_PERMISSIONS'
    | 'USER_NOT_AUTHORIZED'
    | 'USER_ALREADY_PRESENT'
    | 'INVALID_USAGE_RESTRICTION'
    | 'USAGE_RESTRICTION_ERROR'
    | 'STATE_EXECUTION_INSTANCE_NOT_FOUND'
    | 'DELEGATE_TASK_RETRY'
    | 'KUBERNETES_API_TASK_EXCEPTION'
    | 'KUBERNETES_TASK_EXCEPTION'
    | 'KUBERNETES_YAML_ERROR'
    | 'SAVE_FILE_INTO_GCP_STORAGE_FAILED'
    | 'READ_FILE_FROM_GCP_STORAGE_FAILED'
    | 'FILE_NOT_FOUND_ERROR'
    | 'USAGE_LIMITS_EXCEEDED'
    | 'EVENT_PUBLISH_FAILED'
    | 'JIRA_ERROR'
    | 'EXPRESSION_EVALUATION_FAILED'
    | 'KUBERNETES_VALUES_ERROR'
    | 'KUBERNETES_CLUSTER_ERROR'
    | 'INCORRECT_SIGN_IN_MECHANISM'
    | 'OAUTH_LOGIN_FAILED'
    | 'INVALID_TERRAFORM_TARGETS_REQUEST'
    | 'TERRAFORM_EXECUTION_ERROR'
    | 'FILE_READ_FAILED'
    | 'FILE_SIZE_EXCEEDS_LIMIT'
    | 'CLUSTER_NOT_FOUND'
    | 'MARKETPLACE_TOKEN_NOT_FOUND'
    | 'INVALID_MARKETPLACE_TOKEN'
    | 'INVALID_TICKETING_SERVER'
    | 'SERVICENOW_ERROR'
    | 'PASSWORD_EXPIRED'
    | 'USER_LOCKED'
    | 'PASSWORD_STRENGTH_CHECK_FAILED'
    | 'ACCOUNT_DISABLED'
    | 'INVALID_ACCOUNT_PERMISSION'
    | 'PAGERDUTY_ERROR'
    | 'HEALTH_ERROR'
    | 'SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED'
    | 'DOMAIN_WHITELIST_FILTER_CHECK_FAILED'
    | 'INVALID_DASHBOARD_UPDATE_REQUEST'
    | 'DUPLICATE_FIELD'
    | 'INVALID_AZURE_VAULT_CONFIGURATION'
    | 'USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS'
    | 'INVALID_ROLLBACK'
    | 'DATA_COLLECTION_ERROR'
    | 'SUMO_DATA_COLLECTION_ERROR'
    | 'DEPLOYMENT_GOVERNANCE_ERROR'
    | 'BATCH_PROCESSING_ERROR'
    | 'GRAPHQL_ERROR'
    | 'FILE_CREATE_ERROR'
    | 'ILLEGAL_STATE'
    | 'GIT_DIFF_COMMIT_NOT_IN_ORDER'
    | 'FAILED_TO_ACQUIRE_PERSISTENT_LOCK'
    | 'FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK'
    | 'POD_NOT_FOUND_ERROR'
    | 'COMMAND_EXECUTION_ERROR'
    | 'REGISTRY_EXCEPTION'
    | 'ENGINE_INTERRUPT_PROCESSING_EXCEPTION'
    | 'ENGINE_IO_EXCEPTION'
    | 'ENGINE_OUTCOME_EXCEPTION'
    | 'ENGINE_SWEEPING_OUTPUT_EXCEPTION'
    | 'CACHE_NOT_FOUND_EXCEPTION'
    | 'ENGINE_ENTITY_UPDATE_EXCEPTION'
    | 'SHELL_EXECUTION_EXCEPTION'
    | 'TEMPLATE_NOT_FOUND'
    | 'AZURE_SERVICE_EXCEPTION'
    | 'AZURE_CLIENT_EXCEPTION'
    | 'GIT_UNSEEN_REMOTE_HEAD_COMMIT'
    | 'TIMEOUT_ENGINE_EXCEPTION'
    | 'NO_AVAILABLE_DELEGATES'
    | 'NO_INSTALLED_DELEGATES'
    | 'DUPLICATE_DELEGATE_EXCEPTION'
    | 'GCP_MARKETPLACE_EXCEPTION'
    | 'MISSING_DEFAULT_GOOGLE_CREDENTIALS'
    | 'INCORRECT_DEFAULT_GOOGLE_CREDENTIALS'
    | 'OPTIMISTIC_LOCKING_EXCEPTION'
    | 'NG_PIPELINE_EXECUTION_EXCEPTION'
    | 'NG_PIPELINE_CREATE_EXCEPTION'
    | 'RESOURCE_NOT_FOUND_EXCEPTION'
    | 'PMS_INITIALIZE_SDK_EXCEPTION'
    | 'UNEXPECTED_SNIPPET_EXCEPTION'
    | 'UNEXPECTED_SCHEMA_EXCEPTION'
    | 'CONNECTOR_VALIDATION_EXCEPTION'
    | 'TIMESCALE_NOT_AVAILABLE'
    | 'MIGRATION_EXCEPTION'
    | 'REQUEST_PROCESSING_INTERRUPTED'
    | 'SECRET_MANAGER_ID_NOT_FOUND'
    | 'GCP_SECRET_MANAGER_OPERATION_ERROR'
    | 'GCP_SECRET_OPERATION_ERROR'
    | 'GIT_OPERATION_ERROR'
    | 'TASK_FAILURE_ERROR'
    | 'INSTANCE_STATS_PROCESS_ERROR'
    | 'INSTANCE_STATS_MIGRATION_ERROR'
    | 'DEPLOYMENT_MIGRATION_ERROR'
    | 'CG_LICENSE_USAGE_ERROR'
    | 'INSTANCE_STATS_AGGREGATION_ERROR'
    | 'UNRESOLVED_EXPRESSIONS_ERROR'
    | 'KRYO_HANDLER_NOT_FOUND_ERROR'
    | 'DELEGATE_ERROR_HANDLER_EXCEPTION'
    | 'UNEXPECTED_TYPE_ERROR'
    | 'EXCEPTION_HANDLER_NOT_FOUND'
    | 'CONNECTOR_NOT_FOUND_EXCEPTION'
    | 'GCP_SERVER_ERROR'
    | 'HTTP_RESPONSE_EXCEPTION'
    | 'SCM_NOT_FOUND_ERROR'
    | 'SCM_CONFLICT_ERROR'
    | 'SCM_UNPROCESSABLE_ENTITY'
    | 'PROCESS_EXECUTION_EXCEPTION'
    | 'SCM_UNAUTHORIZED'
    | 'SCM_INTERNAL_SERVER_ERROR'
    | 'DATA'
    | 'CONTEXT'
    | 'PR_CREATION_ERROR'
    | 'URL_NOT_REACHABLE'
    | 'URL_NOT_PROVIDED'
    | 'ENGINE_EXPRESSION_EVALUATION_ERROR'
    | 'ENGINE_FUNCTOR_ERROR'
    | 'JIRA_CLIENT_ERROR'
    | 'SCM_NOT_MODIFIED'
    | 'APPROVAL_STEP_NG_ERROR'
    | 'BUCKET_SERVER_ERROR'
    | 'GIT_SYNC_ERROR'
    | 'TEMPLATE_EXCEPTION'
    | 'ENTITY_REFERENCE_EXCEPTION'
    | 'INVALID_INPUT_SET'
    | 'INVALID_OVERLAY_INPUT_SET'
    | 'RESOURCE_ALREADY_EXISTS'
    | 'INVALID_JSON_PAYLOAD'
    | 'POLICY_EVALUATION_FAILURE'
    | 'POLICY_SET_ERROR'
  exception?: Throwable
  failureTypes?: (
    | 'EXPIRED'
    | 'DELEGATE_PROVISIONING'
    | 'CONNECTIVITY'
    | 'AUTHENTICATION'
    | 'VERIFICATION_FAILURE'
    | 'APPLICATION_ERROR'
    | 'AUTHORIZATION_ERROR'
    | 'TIMEOUT_ERROR'
    | 'POLICY_EVALUATION_FAILURE'
  )[]
  level?: 'INFO' | 'ERROR'
  message?: string
}

export interface ResponseNGTemplateConfig {
  correlationId?: string
  data?: NGTemplateConfig
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponsePageFilterDTO {
  correlationId?: string
  data?: PageFilterDTO
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponsePageTemplateSummaryResponse {
  correlationId?: string
  data?: PageTemplateSummaryResponse
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseString {
  correlationId?: string
  data?: string
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseTemplateMergeResponse {
  correlationId?: string
  data?: TemplateMergeResponse
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseTemplateResponse {
  correlationId?: string
  data?: TemplateResponse
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseTemplateWrapperResponse {
  correlationId?: string
  data?: TemplateWrapperResponse
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseVariableMergeServiceResponse {
  correlationId?: string
  data?: VariableMergeServiceResponse
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export type SampleErrorMetadataDTO = ErrorMetadataDTO & {
  sampleMap?: {
    [key: string]: string
  }
}

export type ScmErrorMetadataDTO = ErrorMetadataDTO & {
  conflictCommitId?: string
}

export interface ServiceDescriptor {
  file?: FileDescriptor
  fullName?: string
  index?: number
  methods?: MethodDescriptor[]
  name?: string
  options?: ServiceOptions
}

export interface ServiceExpressionProperties {
  expression?: string
  serviceName?: string
}

export interface ServiceOptions {
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  allFieldsRaw?: {
    [key: string]: { [key: string]: any }
  }
  defaultInstanceForType?: ServiceOptions
  deprecated?: boolean
  descriptorForType?: Descriptor
  initializationErrorString?: string
  initialized?: boolean
  parserForType?: ParserServiceOptions
  serializedSize?: number
  uninterpretedOptionCount?: number
  uninterpretedOptionList?: UninterpretedOption[]
  uninterpretedOptionOrBuilderList?: UninterpretedOptionOrBuilder[]
  unknownFields?: UnknownFieldSet
}

export interface Sort {
  empty?: boolean
  sorted?: boolean
  unsorted?: boolean
}

export interface StackTraceElement {
  className?: string
  fileName?: string
  lineNumber?: number
  methodName?: string
  nativeMethod?: boolean
}

export interface StringValue {
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  defaultInstanceForType?: StringValue
  descriptorForType?: Descriptor
  initializationErrorString?: string
  initialized?: boolean
  parserForType?: ParserStringValue
  serializedSize?: number
  unknownFields?: UnknownFieldSet
  value?: string
  valueBytes?: ByteString
}

export interface StringValueOrBuilder {
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  defaultInstanceForType?: Message
  descriptorForType?: Descriptor
  initializationErrorString?: string
  initialized?: boolean
  unknownFields?: UnknownFieldSet
  value?: string
  valueBytes?: ByteString
}

export interface TemplateApplyRequest {
  checkForAccess?: boolean
  originalEntityYaml: string
}

export interface TemplateDeleteListRequest {
  templateVersionLabels?: string[]
}

export interface TemplateFilterProperties {
  childTypes?: string[]
  description?: string
  filterType?:
    | 'Connector'
    | 'DelegateProfile'
    | 'Delegate'
    | 'PipelineSetup'
    | 'PipelineExecution'
    | 'Deployment'
    | 'Audit'
    | 'Template'
  tags?: {
    [key: string]: string
  }
  templateEntityTypes?: ('Step' | 'Stage')[]
  templateIdentifiers?: string[]
  templateNames?: string[]
}

export interface TemplateInputsErrorDTO {
  fieldName?: string
  identifierOfErrorSource?: string
  message?: string
}

export type TemplateInputsErrorMetadataDTO = ErrorMetadataDTO & {
  errorMap?: {
    [key: string]: TemplateInputsErrorDTO
  }
  errorYaml?: string
}

export interface TemplateMergeResponse {
  mergedPipelineYaml?: string
  templateReferenceSummaries?: TemplateReferenceSummary[]
}

export interface TemplateReferenceProtoDTO {
  accountIdentifier?: StringValue
  accountIdentifierOrBuilder?: StringValueOrBuilder
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  defaultInstanceForType?: TemplateReferenceProtoDTO
  descriptorForType?: Descriptor
  identifier?: StringValue
  identifierOrBuilder?: StringValueOrBuilder
  initializationErrorString?: string
  initialized?: boolean
  orgIdentifier?: StringValue
  orgIdentifierOrBuilder?: StringValueOrBuilder
  parserForType?: ParserTemplateReferenceProtoDTO
  projectIdentifier?: StringValue
  projectIdentifierOrBuilder?: StringValueOrBuilder
  scope?: 'ACCOUNT' | 'ORG' | 'PROJECT' | 'UNKNOWN' | 'UNRECOGNIZED'
  scopeValue?: number
  serializedSize?: number
  unknownFields?: UnknownFieldSet
  versionLabel?: StringValue
  versionLabelOrBuilder?: StringValueOrBuilder
}

export interface TemplateReferenceProtoDTOOrBuilder {
  accountIdentifier?: StringValue
  accountIdentifierOrBuilder?: StringValueOrBuilder
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  defaultInstanceForType?: Message
  descriptorForType?: Descriptor
  identifier?: StringValue
  identifierOrBuilder?: StringValueOrBuilder
  initializationErrorString?: string
  initialized?: boolean
  orgIdentifier?: StringValue
  orgIdentifierOrBuilder?: StringValueOrBuilder
  projectIdentifier?: StringValue
  projectIdentifierOrBuilder?: StringValueOrBuilder
  scope?: 'ACCOUNT' | 'ORG' | 'PROJECT' | 'UNKNOWN' | 'UNRECOGNIZED'
  scopeValue?: number
  unknownFields?: UnknownFieldSet
  versionLabel?: StringValue
  versionLabelOrBuilder?: StringValueOrBuilder
}

export interface TemplateReferenceSummary {
  fqn?: string
  scope?: 'account' | 'org' | 'project' | 'unknown'
  stableTemplate?: boolean
  templateIdentifier?: string
  versionLabel?: string
}

export interface TemplateResponse {
  accountId: string
  childType?: string
  description?: string
  entityValidityDetails?: EntityValidityDetails
  gitDetails?: EntityGitDetails
  identifier: string
  lastUpdatedAt?: number
  name: string
  orgIdentifier?: string
  projectIdentifier?: string
  stableTemplate?: boolean
  tags?: {
    [key: string]: string
  }
  templateEntityType?: 'Step' | 'Stage'
  templateScope?: 'account' | 'org' | 'project' | 'unknown'
  version?: number
  versionLabel?: string
  yaml?: string
}

export interface TemplateSummaryResponse {
  accountId?: string
  childType?: string
  createdAt?: number
  description?: string
  entityValidityDetails?: EntityValidityDetails
  gitDetails?: EntityGitDetails
  identifier?: string
  lastUpdatedAt?: number
  name?: string
  orgIdentifier?: string
  projectIdentifier?: string
  stableTemplate?: boolean
  tags?: {
    [key: string]: string
  }
  templateEntityType?: 'Step' | 'Stage'
  templateScope?: 'account' | 'org' | 'project' | 'unknown'
  version?: number
  versionLabel?: string
  yaml?: string
}

export interface TemplateWrapperResponse {
  templateResponseDTO?: TemplateResponse
  valid?: boolean
}

export interface Throwable {
  cause?: Throwable
  localizedMessage?: string
  message?: string
  stackTrace?: StackTraceElement[]
  suppressed?: Throwable[]
}

export interface UninterpretedOption {
  aggregateValue?: string
  aggregateValueBytes?: ByteString
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  defaultInstanceForType?: UninterpretedOption
  descriptorForType?: Descriptor
  doubleValue?: number
  identifierValue?: string
  identifierValueBytes?: ByteString
  initializationErrorString?: string
  initialized?: boolean
  nameCount?: number
  nameList?: NamePart[]
  nameOrBuilderList?: NamePartOrBuilder[]
  negativeIntValue?: number
  parserForType?: ParserUninterpretedOption
  positiveIntValue?: number
  serializedSize?: number
  stringValue?: ByteString
  unknownFields?: UnknownFieldSet
}

export interface UninterpretedOptionOrBuilder {
  aggregateValue?: string
  aggregateValueBytes?: ByteString
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  defaultInstanceForType?: Message
  descriptorForType?: Descriptor
  doubleValue?: number
  identifierValue?: string
  identifierValueBytes?: ByteString
  initializationErrorString?: string
  initialized?: boolean
  nameCount?: number
  nameList?: NamePart[]
  nameOrBuilderList?: NamePartOrBuilder[]
  negativeIntValue?: number
  positiveIntValue?: number
  stringValue?: ByteString
  unknownFields?: UnknownFieldSet
}

export interface UnknownFieldSet {
  defaultInstanceForType?: UnknownFieldSet
  initialized?: boolean
  parserForType?: Parser
  serializedSize?: number
  serializedSizeAsMessageSet?: number
}

export interface ValidationError {
  error?: string
  fieldId?: string
}

export interface VariableMergeServiceResponse {
  errorResponses?: string[]
  metadataMap?: {
    [key: string]: VariableResponseMapValue
  }
  serviceExpressionPropertiesList?: ServiceExpressionProperties[]
  yaml?: string
}

export interface VariableResponseMapValue {
  yamlOutputProperties?: YamlOutputProperties
  yamlProperties?: YamlProperties
}

export interface YamlOutputProperties {
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  defaultInstanceForType?: YamlOutputProperties
  descriptorForType?: Descriptor
  fqn?: string
  fqnBytes?: ByteString
  initializationErrorString?: string
  initialized?: boolean
  localName?: string
  localNameBytes?: ByteString
  parserForType?: ParserYamlOutputProperties
  serializedSize?: number
  unknownFields?: UnknownFieldSet
}

export interface YamlProperties {
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  defaultInstanceForType?: YamlProperties
  descriptorForType?: Descriptor
  fqn?: string
  fqnBytes?: ByteString
  initializationErrorString?: string
  initialized?: boolean
  localName?: string
  localNameBytes?: ByteString
  parserForType?: ParserYamlProperties
  serializedSize?: number
  unknownFields?: UnknownFieldSet
}

export type FilterDTORequestBody = FilterDTO

export type GetTemplateReferencesBodyRequestBody = string

export interface GetFilterListQueryParams {
  pageIndex?: number
  pageSize?: number
  accountIdentifier: string
  orgIdentifier?: string
  projectIdentifier?: string
  type:
    | 'Connector'
    | 'DelegateProfile'
    | 'Delegate'
    | 'PipelineSetup'
    | 'PipelineExecution'
    | 'Deployment'
    | 'Audit'
    | 'Template'
}

export type GetFilterListProps = Omit<
  GetProps<ResponsePageFilterDTO, Failure | Error, GetFilterListQueryParams, void>,
  'path'
>

/**
 * Get Filter
 */
export const GetFilterList = (props: GetFilterListProps) => (
  <Get<ResponsePageFilterDTO, Failure | Error, GetFilterListQueryParams, void>
    path={`/filters`}
    base={getConfig('template/api')}
    {...props}
  />
)

export type UseGetFilterListProps = Omit<
  UseGetProps<ResponsePageFilterDTO, Failure | Error, GetFilterListQueryParams, void>,
  'path'
>

/**
 * Get Filter
 */
export const useGetFilterList = (props: UseGetFilterListProps) =>
  useGet<ResponsePageFilterDTO, Failure | Error, GetFilterListQueryParams, void>(`/filters`, {
    base: getConfig('template/api'),
    ...props
  })

/**
 * Get Filter
 */
export const getFilterListPromise = (
  props: GetUsingFetchProps<ResponsePageFilterDTO, Failure | Error, GetFilterListQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponsePageFilterDTO, Failure | Error, GetFilterListQueryParams, void>(
    getConfig('template/api'),
    `/filters`,
    props,
    signal
  )

export interface PostFilterQueryParams {
  accountIdentifier: string
}

export type PostFilterProps = Omit<
  MutateProps<ResponseFilterDTO, Failure | Error, PostFilterQueryParams, FilterDTORequestBody, void>,
  'path' | 'verb'
>

/**
 * Create a Filter
 */
export const PostFilter = (props: PostFilterProps) => (
  <Mutate<ResponseFilterDTO, Failure | Error, PostFilterQueryParams, FilterDTORequestBody, void>
    verb="POST"
    path={`/filters`}
    base={getConfig('template/api')}
    {...props}
  />
)

export type UsePostFilterProps = Omit<
  UseMutateProps<ResponseFilterDTO, Failure | Error, PostFilterQueryParams, FilterDTORequestBody, void>,
  'path' | 'verb'
>

/**
 * Create a Filter
 */
export const usePostFilter = (props: UsePostFilterProps) =>
  useMutate<ResponseFilterDTO, Failure | Error, PostFilterQueryParams, FilterDTORequestBody, void>('POST', `/filters`, {
    base: getConfig('template/api'),
    ...props
  })

/**
 * Create a Filter
 */
export const postFilterPromise = (
  props: MutateUsingFetchProps<ResponseFilterDTO, Failure | Error, PostFilterQueryParams, FilterDTORequestBody, void>,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<ResponseFilterDTO, Failure | Error, PostFilterQueryParams, FilterDTORequestBody, void>(
    'POST',
    getConfig('template/api'),
    `/filters`,
    props,
    signal
  )

export interface UpdateFilterQueryParams {
  accountIdentifier: string
}

export type UpdateFilterProps = Omit<
  MutateProps<ResponseFilterDTO, Failure | Error, UpdateFilterQueryParams, FilterDTORequestBody, void>,
  'path' | 'verb'
>

/**
 * Update a Filter
 */
export const UpdateFilter = (props: UpdateFilterProps) => (
  <Mutate<ResponseFilterDTO, Failure | Error, UpdateFilterQueryParams, FilterDTORequestBody, void>
    verb="PUT"
    path={`/filters`}
    base={getConfig('template/api')}
    {...props}
  />
)

export type UseUpdateFilterProps = Omit<
  UseMutateProps<ResponseFilterDTO, Failure | Error, UpdateFilterQueryParams, FilterDTORequestBody, void>,
  'path' | 'verb'
>

/**
 * Update a Filter
 */
export const useUpdateFilter = (props: UseUpdateFilterProps) =>
  useMutate<ResponseFilterDTO, Failure | Error, UpdateFilterQueryParams, FilterDTORequestBody, void>(
    'PUT',
    `/filters`,
    { base: getConfig('template/api'), ...props }
  )

/**
 * Update a Filter
 */
export const updateFilterPromise = (
  props: MutateUsingFetchProps<ResponseFilterDTO, Failure | Error, UpdateFilterQueryParams, FilterDTORequestBody, void>,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<ResponseFilterDTO, Failure | Error, UpdateFilterQueryParams, FilterDTORequestBody, void>(
    'PUT',
    getConfig('template/api'),
    `/filters`,
    props,
    signal
  )

export interface DeleteFilterQueryParams {
  accountIdentifier: string
  orgIdentifier?: string
  projectIdentifier?: string
  type:
    | 'Connector'
    | 'DelegateProfile'
    | 'Delegate'
    | 'PipelineSetup'
    | 'PipelineExecution'
    | 'Deployment'
    | 'Audit'
    | 'Template'
}

export type DeleteFilterProps = Omit<
  MutateProps<ResponseBoolean, Failure | Error, DeleteFilterQueryParams, string, void>,
  'path' | 'verb'
>

/**
 * Delete a filter
 */
export const DeleteFilter = (props: DeleteFilterProps) => (
  <Mutate<ResponseBoolean, Failure | Error, DeleteFilterQueryParams, string, void>
    verb="DELETE"
    path={`/filters`}
    base={getConfig('template/api')}
    {...props}
  />
)

export type UseDeleteFilterProps = Omit<
  UseMutateProps<ResponseBoolean, Failure | Error, DeleteFilterQueryParams, string, void>,
  'path' | 'verb'
>

/**
 * Delete a filter
 */
export const useDeleteFilter = (props: UseDeleteFilterProps) =>
  useMutate<ResponseBoolean, Failure | Error, DeleteFilterQueryParams, string, void>('DELETE', `/filters`, {
    base: getConfig('template/api'),
    ...props
  })

/**
 * Delete a filter
 */
export const deleteFilterPromise = (
  props: MutateUsingFetchProps<ResponseBoolean, Failure | Error, DeleteFilterQueryParams, string, void>,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<ResponseBoolean, Failure | Error, DeleteFilterQueryParams, string, void>(
    'DELETE',
    getConfig('template/api'),
    `/filters`,
    props,
    signal
  )

export interface GetFilterQueryParams {
  accountIdentifier: string
  orgIdentifier?: string
  projectIdentifier?: string
  type:
    | 'Connector'
    | 'DelegateProfile'
    | 'Delegate'
    | 'PipelineSetup'
    | 'PipelineExecution'
    | 'Deployment'
    | 'Audit'
    | 'Template'
}

export interface GetFilterPathParams {
  identifier: string
}

export type GetFilterProps = Omit<
  GetProps<ResponseFilterDTO, Failure | Error, GetFilterQueryParams, GetFilterPathParams>,
  'path'
> &
  GetFilterPathParams

/**
 * Get Filter
 */
export const GetFilter = ({ identifier, ...props }: GetFilterProps) => (
  <Get<ResponseFilterDTO, Failure | Error, GetFilterQueryParams, GetFilterPathParams>
    path={`/filters/${identifier}`}
    base={getConfig('template/api')}
    {...props}
  />
)

export type UseGetFilterProps = Omit<
  UseGetProps<ResponseFilterDTO, Failure | Error, GetFilterQueryParams, GetFilterPathParams>,
  'path'
> &
  GetFilterPathParams

/**
 * Get Filter
 */
export const useGetFilter = ({ identifier, ...props }: UseGetFilterProps) =>
  useGet<ResponseFilterDTO, Failure | Error, GetFilterQueryParams, GetFilterPathParams>(
    (paramsInPath: GetFilterPathParams) => `/filters/${paramsInPath.identifier}`,
    { base: getConfig('template/api'), pathParams: { identifier }, ...props }
  )

/**
 * Get Filter
 */
export const getFilterPromise = (
  {
    identifier,
    ...props
  }: GetUsingFetchProps<ResponseFilterDTO, Failure | Error, GetFilterQueryParams, GetFilterPathParams> & {
    identifier: string
  },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseFilterDTO, Failure | Error, GetFilterQueryParams, GetFilterPathParams>(
    getConfig('template/api'),
    `/filters/${identifier}`,
    props,
    signal
  )

export type GetTemplateHealthStatusProps = Omit<GetProps<ResponseString, unknown, void, void>, 'path'>

/**
 * get health for Template service
 */
export const GetTemplateHealthStatus = (props: GetTemplateHealthStatusProps) => (
  <Get<ResponseString, unknown, void, void> path={`/health`} base={getConfig('template/api')} {...props} />
)

export type UseGetTemplateHealthStatusProps = Omit<UseGetProps<ResponseString, unknown, void, void>, 'path'>

/**
 * get health for Template service
 */
export const useGetTemplateHealthStatus = (props: UseGetTemplateHealthStatusProps) =>
  useGet<ResponseString, unknown, void, void>(`/health`, { base: getConfig('template/api'), ...props })

/**
 * get health for Template service
 */
export const getTemplateHealthStatusPromise = (
  props: GetUsingFetchProps<ResponseString, unknown, void, void>,
  signal?: RequestInit['signal']
) => getUsingFetch<ResponseString, unknown, void, void>(getConfig('template/api'), `/health`, props, signal)

export interface CreateTemplateQueryParams {
  accountIdentifier: string
  orgIdentifier?: string
  projectIdentifier?: string
  branch?: string
  repoIdentifier?: string
  rootFolder?: string
  filePath?: string
  commitMsg?: string
  isNewBranch?: boolean
  baseBranch?: string
  setDefaultTemplate?: boolean
  comments?: string
}

export type CreateTemplateProps = Omit<
  MutateProps<
    ResponseTemplateWrapperResponse,
    Failure | Error,
    CreateTemplateQueryParams,
    GetTemplateReferencesBodyRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Creates a Template
 */
export const CreateTemplate = (props: CreateTemplateProps) => (
  <Mutate<
    ResponseTemplateWrapperResponse,
    Failure | Error,
    CreateTemplateQueryParams,
    GetTemplateReferencesBodyRequestBody,
    void
  >
    verb="POST"
    path={`/templates`}
    base={getConfig('template/api')}
    {...props}
  />
)

export type UseCreateTemplateProps = Omit<
  UseMutateProps<
    ResponseTemplateWrapperResponse,
    Failure | Error,
    CreateTemplateQueryParams,
    GetTemplateReferencesBodyRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Creates a Template
 */
export const useCreateTemplate = (props: UseCreateTemplateProps) =>
  useMutate<
    ResponseTemplateWrapperResponse,
    Failure | Error,
    CreateTemplateQueryParams,
    GetTemplateReferencesBodyRequestBody,
    void
  >('POST', `/templates`, { base: getConfig('template/api'), ...props })

/**
 * Creates a Template
 */
export const createTemplatePromise = (
  props: MutateUsingFetchProps<
    ResponseTemplateWrapperResponse,
    Failure | Error,
    CreateTemplateQueryParams,
    GetTemplateReferencesBodyRequestBody,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    ResponseTemplateWrapperResponse,
    Failure | Error,
    CreateTemplateQueryParams,
    GetTemplateReferencesBodyRequestBody,
    void
  >('POST', getConfig('template/api'), `/templates`, props, signal)

export interface GetYamlWithTemplateRefsResolvedQueryParams {
  accountIdentifier: string
  orgIdentifier?: string
  projectIdentifier?: string
  branch?: string
  repoIdentifier?: string
  getDefaultFromOtherRepo?: boolean
}

export type GetYamlWithTemplateRefsResolvedProps = Omit<
  MutateProps<
    ResponseTemplateMergeResponse,
    Failure | Error,
    GetYamlWithTemplateRefsResolvedQueryParams,
    TemplateApplyRequest,
    void
  >,
  'path' | 'verb'
>

/**
 * Gets complete yaml with templateRefs resolved
 */
export const GetYamlWithTemplateRefsResolved = (props: GetYamlWithTemplateRefsResolvedProps) => (
  <Mutate<
    ResponseTemplateMergeResponse,
    Failure | Error,
    GetYamlWithTemplateRefsResolvedQueryParams,
    TemplateApplyRequest,
    void
  >
    verb="POST"
    path={`/templates/applyTemplates`}
    base={getConfig('template/api')}
    {...props}
  />
)

export type UseGetYamlWithTemplateRefsResolvedProps = Omit<
  UseMutateProps<
    ResponseTemplateMergeResponse,
    Failure | Error,
    GetYamlWithTemplateRefsResolvedQueryParams,
    TemplateApplyRequest,
    void
  >,
  'path' | 'verb'
>

/**
 * Gets complete yaml with templateRefs resolved
 */
export const useGetYamlWithTemplateRefsResolved = (props: UseGetYamlWithTemplateRefsResolvedProps) =>
  useMutate<
    ResponseTemplateMergeResponse,
    Failure | Error,
    GetYamlWithTemplateRefsResolvedQueryParams,
    TemplateApplyRequest,
    void
  >('POST', `/templates/applyTemplates`, { base: getConfig('template/api'), ...props })

/**
 * Gets complete yaml with templateRefs resolved
 */
export const getYamlWithTemplateRefsResolvedPromise = (
  props: MutateUsingFetchProps<
    ResponseTemplateMergeResponse,
    Failure | Error,
    GetYamlWithTemplateRefsResolvedQueryParams,
    TemplateApplyRequest,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    ResponseTemplateMergeResponse,
    Failure | Error,
    GetYamlWithTemplateRefsResolvedQueryParams,
    TemplateApplyRequest,
    void
  >('POST', getConfig('template/api'), `/templates/applyTemplates`, props, signal)

export type DummyApiForSwaggerSchemaCheckProps = Omit<
  GetProps<ResponseNGTemplateConfig, Failure | Error, void, void>,
  'path'
>

/**
 * dummy api for checking template schema
 */
export const DummyApiForSwaggerSchemaCheck = (props: DummyApiForSwaggerSchemaCheckProps) => (
  <Get<ResponseNGTemplateConfig, Failure | Error, void, void>
    path={`/templates/dummyApiForSwaggerSchemaCheck`}
    base={getConfig('template/api')}
    {...props}
  />
)

export type UseDummyApiForSwaggerSchemaCheckProps = Omit<
  UseGetProps<ResponseNGTemplateConfig, Failure | Error, void, void>,
  'path'
>

/**
 * dummy api for checking template schema
 */
export const useDummyApiForSwaggerSchemaCheck = (props: UseDummyApiForSwaggerSchemaCheckProps) =>
  useGet<ResponseNGTemplateConfig, Failure | Error, void, void>(`/templates/dummyApiForSwaggerSchemaCheck`, {
    base: getConfig('template/api'),
    ...props
  })

/**
 * dummy api for checking template schema
 */
export const dummyApiForSwaggerSchemaCheckPromise = (
  props: GetUsingFetchProps<ResponseNGTemplateConfig, Failure | Error, void, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseNGTemplateConfig, Failure | Error, void, void>(
    getConfig('template/api'),
    `/templates/dummyApiForSwaggerSchemaCheck`,
    props,
    signal
  )

export interface GetTemplateListQueryParams {
  accountIdentifier: string
  orgIdentifier?: string
  projectIdentifier?: string
  page?: number
  size?: number
  sort?: string[]
  searchTerm?: string
  filterIdentifier?: string
  templateListType: 'Stable' | 'LastUpdated' | 'All'
  includeAllTemplatesAvailableAtScope?: boolean
  branch?: string
  repoIdentifier?: string
  getDefaultFromOtherRepo?: boolean
  getDistinctFromBranches?: boolean
}

export type GetTemplateListProps = Omit<
  MutateProps<
    ResponsePageTemplateSummaryResponse,
    Failure | Error,
    GetTemplateListQueryParams,
    TemplateFilterProperties,
    void
  >,
  'path' | 'verb'
>

/**
 * Gets all template list
 */
export const GetTemplateList = (props: GetTemplateListProps) => (
  <Mutate<
    ResponsePageTemplateSummaryResponse,
    Failure | Error,
    GetTemplateListQueryParams,
    TemplateFilterProperties,
    void
  >
    verb="POST"
    path={`/templates/list`}
    base={getConfig('template/api')}
    {...props}
  />
)

export type UseGetTemplateListProps = Omit<
  UseMutateProps<
    ResponsePageTemplateSummaryResponse,
    Failure | Error,
    GetTemplateListQueryParams,
    TemplateFilterProperties,
    void
  >,
  'path' | 'verb'
>

/**
 * Gets all template list
 */
export const useGetTemplateList = (props: UseGetTemplateListProps) =>
  useMutate<
    ResponsePageTemplateSummaryResponse,
    Failure | Error,
    GetTemplateListQueryParams,
    TemplateFilterProperties,
    void
  >('POST', `/templates/list`, { base: getConfig('template/api'), ...props })

/**
 * Gets all template list
 */
export const getTemplateListPromise = (
  props: MutateUsingFetchProps<
    ResponsePageTemplateSummaryResponse,
    Failure | Error,
    GetTemplateListQueryParams,
    TemplateFilterProperties,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    ResponsePageTemplateSummaryResponse,
    Failure | Error,
    GetTemplateListQueryParams,
    TemplateFilterProperties,
    void
  >('POST', getConfig('template/api'), `/templates/list`, props, signal)

export interface GetTemplateInputSetYamlQueryParams {
  accountIdentifier: string
  orgIdentifier?: string
  projectIdentifier?: string
  versionLabel: string
  branch?: string
  repoIdentifier?: string
  getDefaultFromOtherRepo?: boolean
}

export interface GetTemplateInputSetYamlPathParams {
  templateIdentifier: string
}

export type GetTemplateInputSetYamlProps = Omit<
  GetProps<ResponseString, Failure | Error, GetTemplateInputSetYamlQueryParams, GetTemplateInputSetYamlPathParams>,
  'path'
> &
  GetTemplateInputSetYamlPathParams

/**
 * Gets template input set yaml
 */
export const GetTemplateInputSetYaml = ({ templateIdentifier, ...props }: GetTemplateInputSetYamlProps) => (
  <Get<ResponseString, Failure | Error, GetTemplateInputSetYamlQueryParams, GetTemplateInputSetYamlPathParams>
    path={`/templates/templateInputs/${templateIdentifier}`}
    base={getConfig('template/api')}
    {...props}
  />
)

export type UseGetTemplateInputSetYamlProps = Omit<
  UseGetProps<ResponseString, Failure | Error, GetTemplateInputSetYamlQueryParams, GetTemplateInputSetYamlPathParams>,
  'path'
> &
  GetTemplateInputSetYamlPathParams

/**
 * Gets template input set yaml
 */
export const useGetTemplateInputSetYaml = ({ templateIdentifier, ...props }: UseGetTemplateInputSetYamlProps) =>
  useGet<ResponseString, Failure | Error, GetTemplateInputSetYamlQueryParams, GetTemplateInputSetYamlPathParams>(
    (paramsInPath: GetTemplateInputSetYamlPathParams) => `/templates/templateInputs/${paramsInPath.templateIdentifier}`,
    { base: getConfig('template/api'), pathParams: { templateIdentifier }, ...props }
  )

/**
 * Gets template input set yaml
 */
export const getTemplateInputSetYamlPromise = (
  {
    templateIdentifier,
    ...props
  }: GetUsingFetchProps<
    ResponseString,
    Failure | Error,
    GetTemplateInputSetYamlQueryParams,
    GetTemplateInputSetYamlPathParams
  > & { templateIdentifier: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseString, Failure | Error, GetTemplateInputSetYamlQueryParams, GetTemplateInputSetYamlPathParams>(
    getConfig('template/api'),
    `/templates/templateInputs/${templateIdentifier}`,
    props,
    signal
  )

export interface GetTemplateReferencesQueryParams {
  accountIdentifier: string
  orgIdentifier?: string
  projectIdentifier?: string
}

export type GetTemplateReferencesProps = Omit<
  MutateProps<
    ResponseListEntityDetailProtoDTO,
    Failure | Error,
    GetTemplateReferencesQueryParams,
    GetTemplateReferencesBodyRequestBody,
    void
  >,
  'path' | 'verb'
>

export const GetTemplateReferences = (props: GetTemplateReferencesProps) => (
  <Mutate<
    ResponseListEntityDetailProtoDTO,
    Failure | Error,
    GetTemplateReferencesQueryParams,
    GetTemplateReferencesBodyRequestBody,
    void
  >
    verb="POST"
    path={`/templates/templateReferences`}
    base={getConfig('template/api')}
    {...props}
  />
)

export type UseGetTemplateReferencesProps = Omit<
  UseMutateProps<
    ResponseListEntityDetailProtoDTO,
    Failure | Error,
    GetTemplateReferencesQueryParams,
    GetTemplateReferencesBodyRequestBody,
    void
  >,
  'path' | 'verb'
>

export const useGetTemplateReferences = (props: UseGetTemplateReferencesProps) =>
  useMutate<
    ResponseListEntityDetailProtoDTO,
    Failure | Error,
    GetTemplateReferencesQueryParams,
    GetTemplateReferencesBodyRequestBody,
    void
  >('POST', `/templates/templateReferences`, { base: getConfig('template/api'), ...props })

export const getTemplateReferencesPromise = (
  props: MutateUsingFetchProps<
    ResponseListEntityDetailProtoDTO,
    Failure | Error,
    GetTemplateReferencesQueryParams,
    GetTemplateReferencesBodyRequestBody,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    ResponseListEntityDetailProtoDTO,
    Failure | Error,
    GetTemplateReferencesQueryParams,
    GetTemplateReferencesBodyRequestBody,
    void
  >('POST', getConfig('template/api'), `/templates/templateReferences`, props, signal)

export interface UpdateExistingTemplateLabelQueryParams {
  accountIdentifier: string
  orgIdentifier?: string
  projectIdentifier?: string
  branch?: string
  repoIdentifier?: string
  rootFolder?: string
  filePath?: string
  commitMsg?: string
  lastObjectId?: string
  resolvedConflictCommitId?: string
  baseBranch?: string
  setDefaultTemplate?: boolean
  comments?: string
}

export interface UpdateExistingTemplateLabelPathParams {
  templateIdentifier: string
  versionLabel: string
}

export type UpdateExistingTemplateLabelProps = Omit<
  MutateProps<
    ResponseTemplateWrapperResponse,
    Failure | Error,
    UpdateExistingTemplateLabelQueryParams,
    GetTemplateReferencesBodyRequestBody,
    UpdateExistingTemplateLabelPathParams
  >,
  'path' | 'verb'
> &
  UpdateExistingTemplateLabelPathParams

/**
 * Updating existing template label
 */
export const UpdateExistingTemplateLabel = ({
  templateIdentifier,
  versionLabel,
  ...props
}: UpdateExistingTemplateLabelProps) => (
  <Mutate<
    ResponseTemplateWrapperResponse,
    Failure | Error,
    UpdateExistingTemplateLabelQueryParams,
    GetTemplateReferencesBodyRequestBody,
    UpdateExistingTemplateLabelPathParams
  >
    verb="PUT"
    path={`/templates/update/${templateIdentifier}/${versionLabel}`}
    base={getConfig('template/api')}
    {...props}
  />
)

export type UseUpdateExistingTemplateLabelProps = Omit<
  UseMutateProps<
    ResponseTemplateWrapperResponse,
    Failure | Error,
    UpdateExistingTemplateLabelQueryParams,
    GetTemplateReferencesBodyRequestBody,
    UpdateExistingTemplateLabelPathParams
  >,
  'path' | 'verb'
> &
  UpdateExistingTemplateLabelPathParams

/**
 * Updating existing template label
 */
export const useUpdateExistingTemplateLabel = ({
  templateIdentifier,
  versionLabel,
  ...props
}: UseUpdateExistingTemplateLabelProps) =>
  useMutate<
    ResponseTemplateWrapperResponse,
    Failure | Error,
    UpdateExistingTemplateLabelQueryParams,
    GetTemplateReferencesBodyRequestBody,
    UpdateExistingTemplateLabelPathParams
  >(
    'PUT',
    (paramsInPath: UpdateExistingTemplateLabelPathParams) =>
      `/templates/update/${paramsInPath.templateIdentifier}/${paramsInPath.versionLabel}`,
    { base: getConfig('template/api'), pathParams: { templateIdentifier, versionLabel }, ...props }
  )

/**
 * Updating existing template label
 */
export const updateExistingTemplateLabelPromise = (
  {
    templateIdentifier,
    versionLabel,
    ...props
  }: MutateUsingFetchProps<
    ResponseTemplateWrapperResponse,
    Failure | Error,
    UpdateExistingTemplateLabelQueryParams,
    GetTemplateReferencesBodyRequestBody,
    UpdateExistingTemplateLabelPathParams
  > & { templateIdentifier: string; versionLabel: string },
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    ResponseTemplateWrapperResponse,
    Failure | Error,
    UpdateExistingTemplateLabelQueryParams,
    GetTemplateReferencesBodyRequestBody,
    UpdateExistingTemplateLabelPathParams
  >('PUT', getConfig('template/api'), `/templates/update/${templateIdentifier}/${versionLabel}`, props, signal)

export interface UpdateStableTemplateQueryParams {
  accountIdentifier: string
  orgIdentifier?: string
  projectIdentifier?: string
  branch?: string
  repoIdentifier?: string
  getDefaultFromOtherRepo?: boolean
  comments?: string
}

export interface UpdateStableTemplatePathParams {
  templateIdentifier: string
  versionLabel: string
}

export type UpdateStableTemplateProps = Omit<
  MutateProps<ResponseString, Failure | Error, UpdateStableTemplateQueryParams, void, UpdateStableTemplatePathParams>,
  'path' | 'verb'
> &
  UpdateStableTemplatePathParams

/**
 * Updating stable template label
 */
export const UpdateStableTemplate = ({ templateIdentifier, versionLabel, ...props }: UpdateStableTemplateProps) => (
  <Mutate<ResponseString, Failure | Error, UpdateStableTemplateQueryParams, void, UpdateStableTemplatePathParams>
    verb="PUT"
    path={`/templates/updateStableTemplate/${templateIdentifier}/${versionLabel}`}
    base={getConfig('template/api')}
    {...props}
  />
)

export type UseUpdateStableTemplateProps = Omit<
  UseMutateProps<
    ResponseString,
    Failure | Error,
    UpdateStableTemplateQueryParams,
    void,
    UpdateStableTemplatePathParams
  >,
  'path' | 'verb'
> &
  UpdateStableTemplatePathParams

/**
 * Updating stable template label
 */
export const useUpdateStableTemplate = ({ templateIdentifier, versionLabel, ...props }: UseUpdateStableTemplateProps) =>
  useMutate<ResponseString, Failure | Error, UpdateStableTemplateQueryParams, void, UpdateStableTemplatePathParams>(
    'PUT',
    (paramsInPath: UpdateStableTemplatePathParams) =>
      `/templates/updateStableTemplate/${paramsInPath.templateIdentifier}/${paramsInPath.versionLabel}`,
    { base: getConfig('template/api'), pathParams: { templateIdentifier, versionLabel }, ...props }
  )

/**
 * Updating stable template label
 */
export const updateStableTemplatePromise = (
  {
    templateIdentifier,
    versionLabel,
    ...props
  }: MutateUsingFetchProps<
    ResponseString,
    Failure | Error,
    UpdateStableTemplateQueryParams,
    void,
    UpdateStableTemplatePathParams
  > & { templateIdentifier: string; versionLabel: string },
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    ResponseString,
    Failure | Error,
    UpdateStableTemplateQueryParams,
    void,
    UpdateStableTemplatePathParams
  >(
    'PUT',
    getConfig('template/api'),
    `/templates/updateStableTemplate/${templateIdentifier}/${versionLabel}`,
    props,
    signal
  )

export interface UpdateTemplateSettingsQueryParams {
  accountIdentifier: string
  orgIdentifier?: string
  projectIdentifier?: string
  updateStableTemplateVersion?: string
  currentScope?: 'account' | 'org' | 'project' | 'unknown'
  updateScope?: 'account' | 'org' | 'project' | 'unknown'
  branch?: string
  repoIdentifier?: string
  getDefaultFromOtherRepo?: boolean
  getDistinctFromBranches?: boolean
}

export interface UpdateTemplateSettingsPathParams {
  templateIdentifier: string
}

export type UpdateTemplateSettingsProps = Omit<
  MutateProps<
    ResponseBoolean,
    Failure | Error,
    UpdateTemplateSettingsQueryParams,
    void,
    UpdateTemplateSettingsPathParams
  >,
  'path' | 'verb'
> &
  UpdateTemplateSettingsPathParams

/**
 * Updating template settings, template scope and template stable version
 */
export const UpdateTemplateSettings = ({ templateIdentifier, ...props }: UpdateTemplateSettingsProps) => (
  <Mutate<ResponseBoolean, Failure | Error, UpdateTemplateSettingsQueryParams, void, UpdateTemplateSettingsPathParams>
    verb="PUT"
    path={`/templates/updateTemplateSettings/${templateIdentifier}`}
    base={getConfig('template/api')}
    {...props}
  />
)

export type UseUpdateTemplateSettingsProps = Omit<
  UseMutateProps<
    ResponseBoolean,
    Failure | Error,
    UpdateTemplateSettingsQueryParams,
    void,
    UpdateTemplateSettingsPathParams
  >,
  'path' | 'verb'
> &
  UpdateTemplateSettingsPathParams

/**
 * Updating template settings, template scope and template stable version
 */
export const useUpdateTemplateSettings = ({ templateIdentifier, ...props }: UseUpdateTemplateSettingsProps) =>
  useMutate<
    ResponseBoolean,
    Failure | Error,
    UpdateTemplateSettingsQueryParams,
    void,
    UpdateTemplateSettingsPathParams
  >(
    'PUT',
    (paramsInPath: UpdateTemplateSettingsPathParams) =>
      `/templates/updateTemplateSettings/${paramsInPath.templateIdentifier}`,
    { base: getConfig('template/api'), pathParams: { templateIdentifier }, ...props }
  )

/**
 * Updating template settings, template scope and template stable version
 */
export const updateTemplateSettingsPromise = (
  {
    templateIdentifier,
    ...props
  }: MutateUsingFetchProps<
    ResponseBoolean,
    Failure | Error,
    UpdateTemplateSettingsQueryParams,
    void,
    UpdateTemplateSettingsPathParams
  > & { templateIdentifier: string },
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    ResponseBoolean,
    Failure | Error,
    UpdateTemplateSettingsQueryParams,
    void,
    UpdateTemplateSettingsPathParams
  >('PUT', getConfig('template/api'), `/templates/updateTemplateSettings/${templateIdentifier}`, props, signal)

export interface ValidateTheIdentifierIsUniqueQueryParams {
  accountIdentifier?: string
  orgIdentifier?: string
  projectIdentifier?: string
  identifier?: string
  versionLabel?: string
}

export type ValidateTheIdentifierIsUniqueProps = Omit<
  GetProps<ResponseBoolean, Failure | Error, ValidateTheIdentifierIsUniqueQueryParams, void>,
  'path'
>

/**
 * Validate Identifier is unique
 */
export const ValidateTheIdentifierIsUnique = (props: ValidateTheIdentifierIsUniqueProps) => (
  <Get<ResponseBoolean, Failure | Error, ValidateTheIdentifierIsUniqueQueryParams, void>
    path={`/templates/validateUniqueIdentifier`}
    base={getConfig('template/api')}
    {...props}
  />
)

export type UseValidateTheIdentifierIsUniqueProps = Omit<
  UseGetProps<ResponseBoolean, Failure | Error, ValidateTheIdentifierIsUniqueQueryParams, void>,
  'path'
>

/**
 * Validate Identifier is unique
 */
export const useValidateTheIdentifierIsUnique = (props: UseValidateTheIdentifierIsUniqueProps) =>
  useGet<ResponseBoolean, Failure | Error, ValidateTheIdentifierIsUniqueQueryParams, void>(
    `/templates/validateUniqueIdentifier`,
    { base: getConfig('template/api'), ...props }
  )

/**
 * Validate Identifier is unique
 */
export const validateTheIdentifierIsUniquePromise = (
  props: GetUsingFetchProps<ResponseBoolean, Failure | Error, ValidateTheIdentifierIsUniqueQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseBoolean, Failure | Error, ValidateTheIdentifierIsUniqueQueryParams, void>(
    getConfig('template/api'),
    `/templates/validateUniqueIdentifier`,
    props,
    signal
  )

export interface CreateVariablesQueryParams {
  accountIdentifier: string
  orgIdentifier?: string
  projectIdentifier?: string
}

export type CreateVariablesProps = Omit<
  MutateProps<ResponseVariableMergeServiceResponse, Failure | Error, CreateVariablesQueryParams, void, void>,
  'path' | 'verb'
>

/**
 * Create variables for Template
 */
export const CreateVariables = (props: CreateVariablesProps) => (
  <Mutate<ResponseVariableMergeServiceResponse, Failure | Error, CreateVariablesQueryParams, void, void>
    verb="POST"
    path={`/templates/variables`}
    base={getConfig('template/api')}
    {...props}
  />
)

export type UseCreateVariablesProps = Omit<
  UseMutateProps<ResponseVariableMergeServiceResponse, Failure | Error, CreateVariablesQueryParams, void, void>,
  'path' | 'verb'
>

/**
 * Create variables for Template
 */
export const useCreateVariables = (props: UseCreateVariablesProps) =>
  useMutate<ResponseVariableMergeServiceResponse, Failure | Error, CreateVariablesQueryParams, void, void>(
    'POST',
    `/templates/variables`,
    { base: getConfig('template/api'), ...props }
  )

/**
 * Create variables for Template
 */
export const createVariablesPromise = (
  props: MutateUsingFetchProps<
    ResponseVariableMergeServiceResponse,
    Failure | Error,
    CreateVariablesQueryParams,
    void,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<ResponseVariableMergeServiceResponse, Failure | Error, CreateVariablesQueryParams, void, void>(
    'POST',
    getConfig('template/api'),
    `/templates/variables`,
    props,
    signal
  )

export interface DeleteTemplateVersionsOfIdentifierQueryParams {
  accountIdentifier: string
  orgIdentifier?: string
  projectIdentifier?: string
  branch?: string
  repoIdentifier?: string
  rootFolder?: string
  filePath?: string
  commitMsg?: string
  lastObjectId?: string
  comments?: string
}

export type DeleteTemplateVersionsOfIdentifierProps = Omit<
  MutateProps<ResponseBoolean, Failure | Error, DeleteTemplateVersionsOfIdentifierQueryParams, string, void>,
  'path' | 'verb'
>

/**
 * Deletes multiple template versionLabels of a particular template identifier
 */
export const DeleteTemplateVersionsOfIdentifier = (props: DeleteTemplateVersionsOfIdentifierProps) => (
  <Mutate<ResponseBoolean, Failure | Error, DeleteTemplateVersionsOfIdentifierQueryParams, string, void>
    verb="DELETE"
    path={`/templates`}
    base={getConfig('template/api')}
    {...props}
  />
)

export type UseDeleteTemplateVersionsOfIdentifierProps = Omit<
  UseMutateProps<ResponseBoolean, Failure | Error, DeleteTemplateVersionsOfIdentifierQueryParams, string, void>,
  'path' | 'verb'
>

/**
 * Deletes multiple template versionLabels of a particular template identifier
 */
export const useDeleteTemplateVersionsOfIdentifier = (props: UseDeleteTemplateVersionsOfIdentifierProps) =>
  useMutate<ResponseBoolean, Failure | Error, DeleteTemplateVersionsOfIdentifierQueryParams, string, void>(
    'DELETE',
    `/templates`,
    { base: getConfig('template/api'), ...props }
  )

/**
 * Deletes multiple template versionLabels of a particular template identifier
 */
export const deleteTemplateVersionsOfIdentifierPromise = (
  props: MutateUsingFetchProps<
    ResponseBoolean,
    Failure | Error,
    DeleteTemplateVersionsOfIdentifierQueryParams,
    string,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<ResponseBoolean, Failure | Error, DeleteTemplateVersionsOfIdentifierQueryParams, string, void>(
    'DELETE',
    getConfig('template/api'),
    `/templates`,
    props,
    signal
  )

export interface GetTemplateQueryParams {
  accountIdentifier: string
  orgIdentifier?: string
  projectIdentifier?: string
  versionLabel?: string
  deleted?: boolean
  branch?: string
  repoIdentifier?: string
  getDefaultFromOtherRepo?: boolean
}

export interface GetTemplatePathParams {
  templateIdentifier: string
}

export type GetTemplateProps = Omit<
  GetProps<ResponseTemplateResponse, Failure | Error, GetTemplateQueryParams, GetTemplatePathParams>,
  'path'
> &
  GetTemplatePathParams

/**
 * Gets Template
 */
export const GetTemplate = ({ templateIdentifier, ...props }: GetTemplateProps) => (
  <Get<ResponseTemplateResponse, Failure | Error, GetTemplateQueryParams, GetTemplatePathParams>
    path={`/templates/${templateIdentifier}`}
    base={getConfig('template/api')}
    {...props}
  />
)

export type UseGetTemplateProps = Omit<
  UseGetProps<ResponseTemplateResponse, Failure | Error, GetTemplateQueryParams, GetTemplatePathParams>,
  'path'
> &
  GetTemplatePathParams

/**
 * Gets Template
 */
export const useGetTemplate = ({ templateIdentifier, ...props }: UseGetTemplateProps) =>
  useGet<ResponseTemplateResponse, Failure | Error, GetTemplateQueryParams, GetTemplatePathParams>(
    (paramsInPath: GetTemplatePathParams) => `/templates/${paramsInPath.templateIdentifier}`,
    { base: getConfig('template/api'), pathParams: { templateIdentifier }, ...props }
  )

/**
 * Gets Template
 */
export const getTemplatePromise = (
  {
    templateIdentifier,
    ...props
  }: GetUsingFetchProps<ResponseTemplateResponse, Failure | Error, GetTemplateQueryParams, GetTemplatePathParams> & {
    templateIdentifier: string
  },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseTemplateResponse, Failure | Error, GetTemplateQueryParams, GetTemplatePathParams>(
    getConfig('template/api'),
    `/templates/${templateIdentifier}`,
    props,
    signal
  )

export interface DeleteTemplateVersionLabelQueryParams {
  accountIdentifier: string
  orgIdentifier?: string
  projectIdentifier?: string
  branch?: string
  repoIdentifier?: string
  rootFolder?: string
  filePath?: string
  commitMsg?: string
  lastObjectId?: string
  comments?: string
}

export interface DeleteTemplateVersionLabelPathParams {
  templateIdentifier: string
}

export type DeleteTemplateVersionLabelProps = Omit<
  MutateProps<
    ResponseBoolean,
    Failure | Error,
    DeleteTemplateVersionLabelQueryParams,
    string,
    DeleteTemplateVersionLabelPathParams
  >,
  'path' | 'verb'
> &
  DeleteTemplateVersionLabelPathParams

/**
 * Deletes template versionLabel
 */
export const DeleteTemplateVersionLabel = ({ templateIdentifier, ...props }: DeleteTemplateVersionLabelProps) => (
  <Mutate<
    ResponseBoolean,
    Failure | Error,
    DeleteTemplateVersionLabelQueryParams,
    string,
    DeleteTemplateVersionLabelPathParams
  >
    verb="DELETE"
    path={`/templates/${templateIdentifier}`}
    base={getConfig('template/api')}
    {...props}
  />
)

export type UseDeleteTemplateVersionLabelProps = Omit<
  UseMutateProps<
    ResponseBoolean,
    Failure | Error,
    DeleteTemplateVersionLabelQueryParams,
    string,
    DeleteTemplateVersionLabelPathParams
  >,
  'path' | 'verb'
> &
  DeleteTemplateVersionLabelPathParams

/**
 * Deletes template versionLabel
 */
export const useDeleteTemplateVersionLabel = ({ templateIdentifier, ...props }: UseDeleteTemplateVersionLabelProps) =>
  useMutate<
    ResponseBoolean,
    Failure | Error,
    DeleteTemplateVersionLabelQueryParams,
    string,
    DeleteTemplateVersionLabelPathParams
  >('DELETE', (paramsInPath: DeleteTemplateVersionLabelPathParams) => `/templates/${paramsInPath.templateIdentifier}`, {
    base: getConfig('template/api'),
    pathParams: { templateIdentifier },
    ...props
  })

/**
 * Deletes template versionLabel
 */
export const deleteTemplateVersionLabelPromise = (
  {
    templateIdentifier,
    ...props
  }: MutateUsingFetchProps<
    ResponseBoolean,
    Failure | Error,
    DeleteTemplateVersionLabelQueryParams,
    string,
    DeleteTemplateVersionLabelPathParams
  > & { templateIdentifier: string },
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    ResponseBoolean,
    Failure | Error,
    DeleteTemplateVersionLabelQueryParams,
    string,
    DeleteTemplateVersionLabelPathParams
  >('DELETE', getConfig('template/api'), `/templates/${templateIdentifier}`, props, signal)
